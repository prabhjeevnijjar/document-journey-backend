
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Agreement
 * 
 */
export type Agreement = $Result.DefaultSelection<Prisma.$AgreementPayload>
/**
 * Model AgreementTrail
 * 
 */
export type AgreementTrail = $Result.DefaultSelection<Prisma.$AgreementTrailPayload>
/**
 * Model AgreementSigner
 * 
 */
export type AgreementSigner = $Result.DefaultSelection<Prisma.$AgreementSignerPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model SigningToken
 * 
 */
export type SigningToken = $Result.DefaultSelection<Prisma.$SigningTokenPayload>
/**
 * Model OtpToken
 * 
 */
export type OtpToken = $Result.DefaultSelection<Prisma.$OtpTokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ActorRole: {
  CREATOR: 'CREATOR',
  SIGNER: 'SIGNER'
};

export type ActorRole = (typeof ActorRole)[keyof typeof ActorRole]


export const ActorAction: {
  CREATED: 'CREATED',
  SENT: 'SENT',
  OPENED: 'OPENED',
  SIGNED: 'SIGNED',
  EXPIRED: 'EXPIRED',
  VIEWED: 'VIEWED'
};

export type ActorAction = (typeof ActorAction)[keyof typeof ActorAction]


export const SignerStatus: {
  PENDING: 'PENDING',
  SIGNED: 'SIGNED'
};

export type SignerStatus = (typeof SignerStatus)[keyof typeof SignerStatus]


export const AgreementStatus: {
  CREATED: 'CREATED',
  SENT: 'SENT',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

export type AgreementStatus = (typeof AgreementStatus)[keyof typeof AgreementStatus]

}

export type ActorRole = $Enums.ActorRole

export const ActorRole: typeof $Enums.ActorRole

export type ActorAction = $Enums.ActorAction

export const ActorAction: typeof $Enums.ActorAction

export type SignerStatus = $Enums.SignerStatus

export const SignerStatus: typeof $Enums.SignerStatus

export type AgreementStatus = $Enums.AgreementStatus

export const AgreementStatus: typeof $Enums.AgreementStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agreement`: Exposes CRUD operations for the **Agreement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agreements
    * const agreements = await prisma.agreement.findMany()
    * ```
    */
  get agreement(): Prisma.AgreementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agreementTrail`: Exposes CRUD operations for the **AgreementTrail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgreementTrails
    * const agreementTrails = await prisma.agreementTrail.findMany()
    * ```
    */
  get agreementTrail(): Prisma.AgreementTrailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agreementSigner`: Exposes CRUD operations for the **AgreementSigner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgreementSigners
    * const agreementSigners = await prisma.agreementSigner.findMany()
    * ```
    */
  get agreementSigner(): Prisma.AgreementSignerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.signingToken`: Exposes CRUD operations for the **SigningToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SigningTokens
    * const signingTokens = await prisma.signingToken.findMany()
    * ```
    */
  get signingToken(): Prisma.SigningTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.otpToken`: Exposes CRUD operations for the **OtpToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OtpTokens
    * const otpTokens = await prisma.otpToken.findMany()
    * ```
    */
  get otpToken(): Prisma.OtpTokenDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Agreement: 'Agreement',
    AgreementTrail: 'AgreementTrail',
    AgreementSigner: 'AgreementSigner',
    Document: 'Document',
    Contact: 'Contact',
    SigningToken: 'SigningToken',
    OtpToken: 'OtpToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "agreement" | "agreementTrail" | "agreementSigner" | "document" | "contact" | "signingToken" | "otpToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Agreement: {
        payload: Prisma.$AgreementPayload<ExtArgs>
        fields: Prisma.AgreementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgreementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgreementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          findFirst: {
            args: Prisma.AgreementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgreementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          findMany: {
            args: Prisma.AgreementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>[]
          }
          create: {
            args: Prisma.AgreementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          createMany: {
            args: Prisma.AgreementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgreementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>[]
          }
          delete: {
            args: Prisma.AgreementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          update: {
            args: Prisma.AgreementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          deleteMany: {
            args: Prisma.AgreementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgreementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgreementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>[]
          }
          upsert: {
            args: Prisma.AgreementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          aggregate: {
            args: Prisma.AgreementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgreement>
          }
          groupBy: {
            args: Prisma.AgreementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgreementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgreementCountArgs<ExtArgs>
            result: $Utils.Optional<AgreementCountAggregateOutputType> | number
          }
        }
      }
      AgreementTrail: {
        payload: Prisma.$AgreementTrailPayload<ExtArgs>
        fields: Prisma.AgreementTrailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgreementTrailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgreementTrailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>
          }
          findFirst: {
            args: Prisma.AgreementTrailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgreementTrailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>
          }
          findMany: {
            args: Prisma.AgreementTrailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>[]
          }
          create: {
            args: Prisma.AgreementTrailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>
          }
          createMany: {
            args: Prisma.AgreementTrailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgreementTrailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>[]
          }
          delete: {
            args: Prisma.AgreementTrailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>
          }
          update: {
            args: Prisma.AgreementTrailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>
          }
          deleteMany: {
            args: Prisma.AgreementTrailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgreementTrailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgreementTrailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>[]
          }
          upsert: {
            args: Prisma.AgreementTrailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementTrailPayload>
          }
          aggregate: {
            args: Prisma.AgreementTrailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgreementTrail>
          }
          groupBy: {
            args: Prisma.AgreementTrailGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgreementTrailGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgreementTrailCountArgs<ExtArgs>
            result: $Utils.Optional<AgreementTrailCountAggregateOutputType> | number
          }
        }
      }
      AgreementSigner: {
        payload: Prisma.$AgreementSignerPayload<ExtArgs>
        fields: Prisma.AgreementSignerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgreementSignerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgreementSignerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>
          }
          findFirst: {
            args: Prisma.AgreementSignerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgreementSignerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>
          }
          findMany: {
            args: Prisma.AgreementSignerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>[]
          }
          create: {
            args: Prisma.AgreementSignerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>
          }
          createMany: {
            args: Prisma.AgreementSignerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgreementSignerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>[]
          }
          delete: {
            args: Prisma.AgreementSignerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>
          }
          update: {
            args: Prisma.AgreementSignerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>
          }
          deleteMany: {
            args: Prisma.AgreementSignerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgreementSignerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgreementSignerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>[]
          }
          upsert: {
            args: Prisma.AgreementSignerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementSignerPayload>
          }
          aggregate: {
            args: Prisma.AgreementSignerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgreementSigner>
          }
          groupBy: {
            args: Prisma.AgreementSignerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgreementSignerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgreementSignerCountArgs<ExtArgs>
            result: $Utils.Optional<AgreementSignerCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      SigningToken: {
        payload: Prisma.$SigningTokenPayload<ExtArgs>
        fields: Prisma.SigningTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SigningTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SigningTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>
          }
          findFirst: {
            args: Prisma.SigningTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SigningTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>
          }
          findMany: {
            args: Prisma.SigningTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>[]
          }
          create: {
            args: Prisma.SigningTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>
          }
          createMany: {
            args: Prisma.SigningTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SigningTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>[]
          }
          delete: {
            args: Prisma.SigningTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>
          }
          update: {
            args: Prisma.SigningTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>
          }
          deleteMany: {
            args: Prisma.SigningTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SigningTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SigningTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>[]
          }
          upsert: {
            args: Prisma.SigningTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SigningTokenPayload>
          }
          aggregate: {
            args: Prisma.SigningTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSigningToken>
          }
          groupBy: {
            args: Prisma.SigningTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<SigningTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.SigningTokenCountArgs<ExtArgs>
            result: $Utils.Optional<SigningTokenCountAggregateOutputType> | number
          }
        }
      }
      OtpToken: {
        payload: Prisma.$OtpTokenPayload<ExtArgs>
        fields: Prisma.OtpTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>
          }
          findFirst: {
            args: Prisma.OtpTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>
          }
          findMany: {
            args: Prisma.OtpTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>[]
          }
          create: {
            args: Prisma.OtpTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>
          }
          createMany: {
            args: Prisma.OtpTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtpTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>[]
          }
          delete: {
            args: Prisma.OtpTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>
          }
          update: {
            args: Prisma.OtpTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>
          }
          deleteMany: {
            args: Prisma.OtpTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OtpTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>[]
          }
          upsert: {
            args: Prisma.OtpTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpTokenPayload>
          }
          aggregate: {
            args: Prisma.OtpTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtpToken>
          }
          groupBy: {
            args: Prisma.OtpTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpTokenCountArgs<ExtArgs>
            result: $Utils.Optional<OtpTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    agreement?: AgreementOmit
    agreementTrail?: AgreementTrailOmit
    agreementSigner?: AgreementSignerOmit
    document?: DocumentOmit
    contact?: ContactOmit
    signingToken?: SigningTokenOmit
    otpToken?: OtpTokenOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    agreements: number
    documents: number
    contacts: number
    trails: number
    otpTokens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreements?: boolean | UserCountOutputTypeCountAgreementsArgs
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    contacts?: boolean | UserCountOutputTypeCountContactsArgs
    trails?: boolean | UserCountOutputTypeCountTrailsArgs
    otpTokens?: boolean | UserCountOutputTypeCountOtpTokensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAgreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementTrailWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtpTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpTokenWhereInput
  }


  /**
   * Count Type AgreementCountOutputType
   */

  export type AgreementCountOutputType = {
    trails: number
    signers: number
    signingTokens: number
  }

  export type AgreementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trails?: boolean | AgreementCountOutputTypeCountTrailsArgs
    signers?: boolean | AgreementCountOutputTypeCountSignersArgs
    signingTokens?: boolean | AgreementCountOutputTypeCountSigningTokensArgs
  }

  // Custom InputTypes
  /**
   * AgreementCountOutputType without action
   */
  export type AgreementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementCountOutputType
     */
    select?: AgreementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgreementCountOutputType without action
   */
  export type AgreementCountOutputTypeCountTrailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementTrailWhereInput
  }

  /**
   * AgreementCountOutputType without action
   */
  export type AgreementCountOutputTypeCountSignersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementSignerWhereInput
  }

  /**
   * AgreementCountOutputType without action
   */
  export type AgreementCountOutputTypeCountSigningTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SigningTokenWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    provider: string | null
    avatar: string | null
    isVerified: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    provider: string | null
    avatar: string | null
    isVerified: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    createdAt: number
    provider: number
    avatar: number
    isVerified: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    provider?: true
    avatar?: true
    isVerified?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    provider?: true
    avatar?: true
    isVerified?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    provider?: true
    avatar?: true
    isVerified?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    role: string
    createdAt: Date
    provider: string
    avatar: string | null
    isVerified: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    provider?: boolean
    avatar?: boolean
    isVerified?: boolean
    agreements?: boolean | User$agreementsArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    contacts?: boolean | User$contactsArgs<ExtArgs>
    trails?: boolean | User$trailsArgs<ExtArgs>
    otpTokens?: boolean | User$otpTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    provider?: boolean
    avatar?: boolean
    isVerified?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    provider?: boolean
    avatar?: boolean
    isVerified?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    provider?: boolean
    avatar?: boolean
    isVerified?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "role" | "createdAt" | "provider" | "avatar" | "isVerified", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreements?: boolean | User$agreementsArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    contacts?: boolean | User$contactsArgs<ExtArgs>
    trails?: boolean | User$trailsArgs<ExtArgs>
    otpTokens?: boolean | User$otpTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      agreements: Prisma.$AgreementPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      trails: Prisma.$AgreementTrailPayload<ExtArgs>[]
      otpTokens: Prisma.$OtpTokenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: string
      createdAt: Date
      provider: string
      avatar: string | null
      isVerified: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agreements<T extends User$agreementsArgs<ExtArgs> = {}>(args?: Subset<T, User$agreementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contacts<T extends User$contactsArgs<ExtArgs> = {}>(args?: Subset<T, User$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trails<T extends User$trailsArgs<ExtArgs> = {}>(args?: Subset<T, User$trailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    otpTokens<T extends User$otpTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$otpTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly provider: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.agreements
   */
  export type User$agreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    where?: AgreementWhereInput
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    cursor?: AgreementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.contacts
   */
  export type User$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * User.trails
   */
  export type User$trailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    where?: AgreementTrailWhereInput
    orderBy?: AgreementTrailOrderByWithRelationInput | AgreementTrailOrderByWithRelationInput[]
    cursor?: AgreementTrailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgreementTrailScalarFieldEnum | AgreementTrailScalarFieldEnum[]
  }

  /**
   * User.otpTokens
   */
  export type User$otpTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    where?: OtpTokenWhereInput
    orderBy?: OtpTokenOrderByWithRelationInput | OtpTokenOrderByWithRelationInput[]
    cursor?: OtpTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtpTokenScalarFieldEnum | OtpTokenScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Agreement
   */

  export type AggregateAgreement = {
    _count: AgreementCountAggregateOutputType | null
    _avg: AgreementAvgAggregateOutputType | null
    _sum: AgreementSumAggregateOutputType | null
    _min: AgreementMinAggregateOutputType | null
    _max: AgreementMaxAggregateOutputType | null
  }

  export type AgreementAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    fileSize: number | null
  }

  export type AgreementSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    fileSize: number | null
  }

  export type AgreementMinAggregateOutputType = {
    id: number | null
    name: string | null
    creatorId: number | null
    fileUrl: string | null
    receiverEmail: string | null
    status: $Enums.AgreementStatus | null
    signatureCoords: string | null
    createdAt: Date | null
    mimeType: string | null
    fileSize: number | null
    originalFilename: string | null
  }

  export type AgreementMaxAggregateOutputType = {
    id: number | null
    name: string | null
    creatorId: number | null
    fileUrl: string | null
    receiverEmail: string | null
    status: $Enums.AgreementStatus | null
    signatureCoords: string | null
    createdAt: Date | null
    mimeType: string | null
    fileSize: number | null
    originalFilename: string | null
  }

  export type AgreementCountAggregateOutputType = {
    id: number
    name: number
    creatorId: number
    fileUrl: number
    receiverEmail: number
    status: number
    signatureCoords: number
    createdAt: number
    mimeType: number
    fileSize: number
    originalFilename: number
    _all: number
  }


  export type AgreementAvgAggregateInputType = {
    id?: true
    creatorId?: true
    fileSize?: true
  }

  export type AgreementSumAggregateInputType = {
    id?: true
    creatorId?: true
    fileSize?: true
  }

  export type AgreementMinAggregateInputType = {
    id?: true
    name?: true
    creatorId?: true
    fileUrl?: true
    receiverEmail?: true
    status?: true
    signatureCoords?: true
    createdAt?: true
    mimeType?: true
    fileSize?: true
    originalFilename?: true
  }

  export type AgreementMaxAggregateInputType = {
    id?: true
    name?: true
    creatorId?: true
    fileUrl?: true
    receiverEmail?: true
    status?: true
    signatureCoords?: true
    createdAt?: true
    mimeType?: true
    fileSize?: true
    originalFilename?: true
  }

  export type AgreementCountAggregateInputType = {
    id?: true
    name?: true
    creatorId?: true
    fileUrl?: true
    receiverEmail?: true
    status?: true
    signatureCoords?: true
    createdAt?: true
    mimeType?: true
    fileSize?: true
    originalFilename?: true
    _all?: true
  }

  export type AgreementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agreement to aggregate.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agreements
    **/
    _count?: true | AgreementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgreementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgreementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgreementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgreementMaxAggregateInputType
  }

  export type GetAgreementAggregateType<T extends AgreementAggregateArgs> = {
        [P in keyof T & keyof AggregateAgreement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgreement[P]>
      : GetScalarType<T[P], AggregateAgreement[P]>
  }




  export type AgreementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementWhereInput
    orderBy?: AgreementOrderByWithAggregationInput | AgreementOrderByWithAggregationInput[]
    by: AgreementScalarFieldEnum[] | AgreementScalarFieldEnum
    having?: AgreementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgreementCountAggregateInputType | true
    _avg?: AgreementAvgAggregateInputType
    _sum?: AgreementSumAggregateInputType
    _min?: AgreementMinAggregateInputType
    _max?: AgreementMaxAggregateInputType
  }

  export type AgreementGroupByOutputType = {
    id: number
    name: string
    creatorId: number
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords: string | null
    createdAt: Date
    mimeType: string | null
    fileSize: number | null
    originalFilename: string | null
    _count: AgreementCountAggregateOutputType | null
    _avg: AgreementAvgAggregateOutputType | null
    _sum: AgreementSumAggregateOutputType | null
    _min: AgreementMinAggregateOutputType | null
    _max: AgreementMaxAggregateOutputType | null
  }

  type GetAgreementGroupByPayload<T extends AgreementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgreementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgreementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgreementGroupByOutputType[P]>
            : GetScalarType<T[P], AgreementGroupByOutputType[P]>
        }
      >
    >


  export type AgreementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    creatorId?: boolean
    fileUrl?: boolean
    receiverEmail?: boolean
    status?: boolean
    signatureCoords?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    trails?: boolean | Agreement$trailsArgs<ExtArgs>
    signers?: boolean | Agreement$signersArgs<ExtArgs>
    signingTokens?: boolean | Agreement$signingTokensArgs<ExtArgs>
    _count?: boolean | AgreementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreement"]>

  export type AgreementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    creatorId?: boolean
    fileUrl?: boolean
    receiverEmail?: boolean
    status?: boolean
    signatureCoords?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreement"]>

  export type AgreementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    creatorId?: boolean
    fileUrl?: boolean
    receiverEmail?: boolean
    status?: boolean
    signatureCoords?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreement"]>

  export type AgreementSelectScalar = {
    id?: boolean
    name?: boolean
    creatorId?: boolean
    fileUrl?: boolean
    receiverEmail?: boolean
    status?: boolean
    signatureCoords?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
  }

  export type AgreementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "creatorId" | "fileUrl" | "receiverEmail" | "status" | "signatureCoords" | "createdAt" | "mimeType" | "fileSize" | "originalFilename", ExtArgs["result"]["agreement"]>
  export type AgreementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    trails?: boolean | Agreement$trailsArgs<ExtArgs>
    signers?: boolean | Agreement$signersArgs<ExtArgs>
    signingTokens?: boolean | Agreement$signingTokensArgs<ExtArgs>
    _count?: boolean | AgreementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgreementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AgreementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AgreementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agreement"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      trails: Prisma.$AgreementTrailPayload<ExtArgs>[]
      signers: Prisma.$AgreementSignerPayload<ExtArgs>[]
      signingTokens: Prisma.$SigningTokenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      creatorId: number
      fileUrl: string
      receiverEmail: string
      status: $Enums.AgreementStatus
      signatureCoords: string | null
      createdAt: Date
      mimeType: string | null
      fileSize: number | null
      originalFilename: string | null
    }, ExtArgs["result"]["agreement"]>
    composites: {}
  }

  type AgreementGetPayload<S extends boolean | null | undefined | AgreementDefaultArgs> = $Result.GetResult<Prisma.$AgreementPayload, S>

  type AgreementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgreementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgreementCountAggregateInputType | true
    }

  export interface AgreementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agreement'], meta: { name: 'Agreement' } }
    /**
     * Find zero or one Agreement that matches the filter.
     * @param {AgreementFindUniqueArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgreementFindUniqueArgs>(args: SelectSubset<T, AgreementFindUniqueArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Agreement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgreementFindUniqueOrThrowArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgreementFindUniqueOrThrowArgs>(args: SelectSubset<T, AgreementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agreement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementFindFirstArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgreementFindFirstArgs>(args?: SelectSubset<T, AgreementFindFirstArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agreement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementFindFirstOrThrowArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgreementFindFirstOrThrowArgs>(args?: SelectSubset<T, AgreementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Agreements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agreements
     * const agreements = await prisma.agreement.findMany()
     * 
     * // Get first 10 Agreements
     * const agreements = await prisma.agreement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agreementWithIdOnly = await prisma.agreement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgreementFindManyArgs>(args?: SelectSubset<T, AgreementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Agreement.
     * @param {AgreementCreateArgs} args - Arguments to create a Agreement.
     * @example
     * // Create one Agreement
     * const Agreement = await prisma.agreement.create({
     *   data: {
     *     // ... data to create a Agreement
     *   }
     * })
     * 
     */
    create<T extends AgreementCreateArgs>(args: SelectSubset<T, AgreementCreateArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Agreements.
     * @param {AgreementCreateManyArgs} args - Arguments to create many Agreements.
     * @example
     * // Create many Agreements
     * const agreement = await prisma.agreement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgreementCreateManyArgs>(args?: SelectSubset<T, AgreementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agreements and returns the data saved in the database.
     * @param {AgreementCreateManyAndReturnArgs} args - Arguments to create many Agreements.
     * @example
     * // Create many Agreements
     * const agreement = await prisma.agreement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agreements and only return the `id`
     * const agreementWithIdOnly = await prisma.agreement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgreementCreateManyAndReturnArgs>(args?: SelectSubset<T, AgreementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Agreement.
     * @param {AgreementDeleteArgs} args - Arguments to delete one Agreement.
     * @example
     * // Delete one Agreement
     * const Agreement = await prisma.agreement.delete({
     *   where: {
     *     // ... filter to delete one Agreement
     *   }
     * })
     * 
     */
    delete<T extends AgreementDeleteArgs>(args: SelectSubset<T, AgreementDeleteArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Agreement.
     * @param {AgreementUpdateArgs} args - Arguments to update one Agreement.
     * @example
     * // Update one Agreement
     * const agreement = await prisma.agreement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgreementUpdateArgs>(args: SelectSubset<T, AgreementUpdateArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Agreements.
     * @param {AgreementDeleteManyArgs} args - Arguments to filter Agreements to delete.
     * @example
     * // Delete a few Agreements
     * const { count } = await prisma.agreement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgreementDeleteManyArgs>(args?: SelectSubset<T, AgreementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agreements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agreements
     * const agreement = await prisma.agreement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgreementUpdateManyArgs>(args: SelectSubset<T, AgreementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agreements and returns the data updated in the database.
     * @param {AgreementUpdateManyAndReturnArgs} args - Arguments to update many Agreements.
     * @example
     * // Update many Agreements
     * const agreement = await prisma.agreement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agreements and only return the `id`
     * const agreementWithIdOnly = await prisma.agreement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgreementUpdateManyAndReturnArgs>(args: SelectSubset<T, AgreementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Agreement.
     * @param {AgreementUpsertArgs} args - Arguments to update or create a Agreement.
     * @example
     * // Update or create a Agreement
     * const agreement = await prisma.agreement.upsert({
     *   create: {
     *     // ... data to create a Agreement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agreement we want to update
     *   }
     * })
     */
    upsert<T extends AgreementUpsertArgs>(args: SelectSubset<T, AgreementUpsertArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Agreements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementCountArgs} args - Arguments to filter Agreements to count.
     * @example
     * // Count the number of Agreements
     * const count = await prisma.agreement.count({
     *   where: {
     *     // ... the filter for the Agreements we want to count
     *   }
     * })
    **/
    count<T extends AgreementCountArgs>(
      args?: Subset<T, AgreementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgreementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agreement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgreementAggregateArgs>(args: Subset<T, AgreementAggregateArgs>): Prisma.PrismaPromise<GetAgreementAggregateType<T>>

    /**
     * Group by Agreement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgreementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgreementGroupByArgs['orderBy'] }
        : { orderBy?: AgreementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgreementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgreementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agreement model
   */
  readonly fields: AgreementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agreement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgreementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    trails<T extends Agreement$trailsArgs<ExtArgs> = {}>(args?: Subset<T, Agreement$trailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    signers<T extends Agreement$signersArgs<ExtArgs> = {}>(args?: Subset<T, Agreement$signersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    signingTokens<T extends Agreement$signingTokensArgs<ExtArgs> = {}>(args?: Subset<T, Agreement$signingTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agreement model
   */
  interface AgreementFieldRefs {
    readonly id: FieldRef<"Agreement", 'Int'>
    readonly name: FieldRef<"Agreement", 'String'>
    readonly creatorId: FieldRef<"Agreement", 'Int'>
    readonly fileUrl: FieldRef<"Agreement", 'String'>
    readonly receiverEmail: FieldRef<"Agreement", 'String'>
    readonly status: FieldRef<"Agreement", 'AgreementStatus'>
    readonly signatureCoords: FieldRef<"Agreement", 'String'>
    readonly createdAt: FieldRef<"Agreement", 'DateTime'>
    readonly mimeType: FieldRef<"Agreement", 'String'>
    readonly fileSize: FieldRef<"Agreement", 'Int'>
    readonly originalFilename: FieldRef<"Agreement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Agreement findUnique
   */
  export type AgreementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement findUniqueOrThrow
   */
  export type AgreementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement findFirst
   */
  export type AgreementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agreements.
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agreements.
     */
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Agreement findFirstOrThrow
   */
  export type AgreementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agreements.
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agreements.
     */
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Agreement findMany
   */
  export type AgreementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreements to fetch.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agreements.
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Agreement create
   */
  export type AgreementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * The data needed to create a Agreement.
     */
    data: XOR<AgreementCreateInput, AgreementUncheckedCreateInput>
  }

  /**
   * Agreement createMany
   */
  export type AgreementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agreements.
     */
    data: AgreementCreateManyInput | AgreementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agreement createManyAndReturn
   */
  export type AgreementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * The data used to create many Agreements.
     */
    data: AgreementCreateManyInput | AgreementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agreement update
   */
  export type AgreementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * The data needed to update a Agreement.
     */
    data: XOR<AgreementUpdateInput, AgreementUncheckedUpdateInput>
    /**
     * Choose, which Agreement to update.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement updateMany
   */
  export type AgreementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agreements.
     */
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyInput>
    /**
     * Filter which Agreements to update
     */
    where?: AgreementWhereInput
    /**
     * Limit how many Agreements to update.
     */
    limit?: number
  }

  /**
   * Agreement updateManyAndReturn
   */
  export type AgreementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * The data used to update Agreements.
     */
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyInput>
    /**
     * Filter which Agreements to update
     */
    where?: AgreementWhereInput
    /**
     * Limit how many Agreements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agreement upsert
   */
  export type AgreementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * The filter to search for the Agreement to update in case it exists.
     */
    where: AgreementWhereUniqueInput
    /**
     * In case the Agreement found by the `where` argument doesn't exist, create a new Agreement with this data.
     */
    create: XOR<AgreementCreateInput, AgreementUncheckedCreateInput>
    /**
     * In case the Agreement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgreementUpdateInput, AgreementUncheckedUpdateInput>
  }

  /**
   * Agreement delete
   */
  export type AgreementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter which Agreement to delete.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement deleteMany
   */
  export type AgreementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agreements to delete
     */
    where?: AgreementWhereInput
    /**
     * Limit how many Agreements to delete.
     */
    limit?: number
  }

  /**
   * Agreement.trails
   */
  export type Agreement$trailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    where?: AgreementTrailWhereInput
    orderBy?: AgreementTrailOrderByWithRelationInput | AgreementTrailOrderByWithRelationInput[]
    cursor?: AgreementTrailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgreementTrailScalarFieldEnum | AgreementTrailScalarFieldEnum[]
  }

  /**
   * Agreement.signers
   */
  export type Agreement$signersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    where?: AgreementSignerWhereInput
    orderBy?: AgreementSignerOrderByWithRelationInput | AgreementSignerOrderByWithRelationInput[]
    cursor?: AgreementSignerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgreementSignerScalarFieldEnum | AgreementSignerScalarFieldEnum[]
  }

  /**
   * Agreement.signingTokens
   */
  export type Agreement$signingTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    where?: SigningTokenWhereInput
    orderBy?: SigningTokenOrderByWithRelationInput | SigningTokenOrderByWithRelationInput[]
    cursor?: SigningTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SigningTokenScalarFieldEnum | SigningTokenScalarFieldEnum[]
  }

  /**
   * Agreement without action
   */
  export type AgreementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
  }


  /**
   * Model AgreementTrail
   */

  export type AggregateAgreementTrail = {
    _count: AgreementTrailCountAggregateOutputType | null
    _avg: AgreementTrailAvgAggregateOutputType | null
    _sum: AgreementTrailSumAggregateOutputType | null
    _min: AgreementTrailMinAggregateOutputType | null
    _max: AgreementTrailMaxAggregateOutputType | null
  }

  export type AgreementTrailAvgAggregateOutputType = {
    id: number | null
    agreementId: number | null
    actorId: number | null
  }

  export type AgreementTrailSumAggregateOutputType = {
    id: number | null
    agreementId: number | null
    actorId: number | null
  }

  export type AgreementTrailMinAggregateOutputType = {
    id: number | null
    agreementId: number | null
    actorId: number | null
    actorRole: $Enums.ActorRole | null
    actorAction: $Enums.ActorAction | null
    createdAt: Date | null
    ipAddress: string | null
    previousLogHash: string | null
    logHash: string | null
  }

  export type AgreementTrailMaxAggregateOutputType = {
    id: number | null
    agreementId: number | null
    actorId: number | null
    actorRole: $Enums.ActorRole | null
    actorAction: $Enums.ActorAction | null
    createdAt: Date | null
    ipAddress: string | null
    previousLogHash: string | null
    logHash: string | null
  }

  export type AgreementTrailCountAggregateOutputType = {
    id: number
    agreementId: number
    actorId: number
    actorRole: number
    actorAction: number
    createdAt: number
    ipAddress: number
    previousLogHash: number
    logHash: number
    _all: number
  }


  export type AgreementTrailAvgAggregateInputType = {
    id?: true
    agreementId?: true
    actorId?: true
  }

  export type AgreementTrailSumAggregateInputType = {
    id?: true
    agreementId?: true
    actorId?: true
  }

  export type AgreementTrailMinAggregateInputType = {
    id?: true
    agreementId?: true
    actorId?: true
    actorRole?: true
    actorAction?: true
    createdAt?: true
    ipAddress?: true
    previousLogHash?: true
    logHash?: true
  }

  export type AgreementTrailMaxAggregateInputType = {
    id?: true
    agreementId?: true
    actorId?: true
    actorRole?: true
    actorAction?: true
    createdAt?: true
    ipAddress?: true
    previousLogHash?: true
    logHash?: true
  }

  export type AgreementTrailCountAggregateInputType = {
    id?: true
    agreementId?: true
    actorId?: true
    actorRole?: true
    actorAction?: true
    createdAt?: true
    ipAddress?: true
    previousLogHash?: true
    logHash?: true
    _all?: true
  }

  export type AgreementTrailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgreementTrail to aggregate.
     */
    where?: AgreementTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementTrails to fetch.
     */
    orderBy?: AgreementTrailOrderByWithRelationInput | AgreementTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgreementTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementTrails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgreementTrails
    **/
    _count?: true | AgreementTrailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgreementTrailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgreementTrailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgreementTrailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgreementTrailMaxAggregateInputType
  }

  export type GetAgreementTrailAggregateType<T extends AgreementTrailAggregateArgs> = {
        [P in keyof T & keyof AggregateAgreementTrail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgreementTrail[P]>
      : GetScalarType<T[P], AggregateAgreementTrail[P]>
  }




  export type AgreementTrailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementTrailWhereInput
    orderBy?: AgreementTrailOrderByWithAggregationInput | AgreementTrailOrderByWithAggregationInput[]
    by: AgreementTrailScalarFieldEnum[] | AgreementTrailScalarFieldEnum
    having?: AgreementTrailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgreementTrailCountAggregateInputType | true
    _avg?: AgreementTrailAvgAggregateInputType
    _sum?: AgreementTrailSumAggregateInputType
    _min?: AgreementTrailMinAggregateInputType
    _max?: AgreementTrailMaxAggregateInputType
  }

  export type AgreementTrailGroupByOutputType = {
    id: number
    agreementId: number
    actorId: number | null
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt: Date
    ipAddress: string | null
    previousLogHash: string | null
    logHash: string | null
    _count: AgreementTrailCountAggregateOutputType | null
    _avg: AgreementTrailAvgAggregateOutputType | null
    _sum: AgreementTrailSumAggregateOutputType | null
    _min: AgreementTrailMinAggregateOutputType | null
    _max: AgreementTrailMaxAggregateOutputType | null
  }

  type GetAgreementTrailGroupByPayload<T extends AgreementTrailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgreementTrailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgreementTrailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgreementTrailGroupByOutputType[P]>
            : GetScalarType<T[P], AgreementTrailGroupByOutputType[P]>
        }
      >
    >


  export type AgreementTrailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    actorId?: boolean
    actorRole?: boolean
    actorAction?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    previousLogHash?: boolean
    logHash?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
    actor?: boolean | AgreementTrail$actorArgs<ExtArgs>
  }, ExtArgs["result"]["agreementTrail"]>

  export type AgreementTrailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    actorId?: boolean
    actorRole?: boolean
    actorAction?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    previousLogHash?: boolean
    logHash?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
    actor?: boolean | AgreementTrail$actorArgs<ExtArgs>
  }, ExtArgs["result"]["agreementTrail"]>

  export type AgreementTrailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    actorId?: boolean
    actorRole?: boolean
    actorAction?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    previousLogHash?: boolean
    logHash?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
    actor?: boolean | AgreementTrail$actorArgs<ExtArgs>
  }, ExtArgs["result"]["agreementTrail"]>

  export type AgreementTrailSelectScalar = {
    id?: boolean
    agreementId?: boolean
    actorId?: boolean
    actorRole?: boolean
    actorAction?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    previousLogHash?: boolean
    logHash?: boolean
  }

  export type AgreementTrailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agreementId" | "actorId" | "actorRole" | "actorAction" | "createdAt" | "ipAddress" | "previousLogHash" | "logHash", ExtArgs["result"]["agreementTrail"]>
  export type AgreementTrailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
    actor?: boolean | AgreementTrail$actorArgs<ExtArgs>
  }
  export type AgreementTrailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
    actor?: boolean | AgreementTrail$actorArgs<ExtArgs>
  }
  export type AgreementTrailIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
    actor?: boolean | AgreementTrail$actorArgs<ExtArgs>
  }

  export type $AgreementTrailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgreementTrail"
    objects: {
      agreement: Prisma.$AgreementPayload<ExtArgs>
      actor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      agreementId: number
      actorId: number | null
      actorRole: $Enums.ActorRole
      actorAction: $Enums.ActorAction
      createdAt: Date
      ipAddress: string | null
      previousLogHash: string | null
      logHash: string | null
    }, ExtArgs["result"]["agreementTrail"]>
    composites: {}
  }

  type AgreementTrailGetPayload<S extends boolean | null | undefined | AgreementTrailDefaultArgs> = $Result.GetResult<Prisma.$AgreementTrailPayload, S>

  type AgreementTrailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgreementTrailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgreementTrailCountAggregateInputType | true
    }

  export interface AgreementTrailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgreementTrail'], meta: { name: 'AgreementTrail' } }
    /**
     * Find zero or one AgreementTrail that matches the filter.
     * @param {AgreementTrailFindUniqueArgs} args - Arguments to find a AgreementTrail
     * @example
     * // Get one AgreementTrail
     * const agreementTrail = await prisma.agreementTrail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgreementTrailFindUniqueArgs>(args: SelectSubset<T, AgreementTrailFindUniqueArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgreementTrail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgreementTrailFindUniqueOrThrowArgs} args - Arguments to find a AgreementTrail
     * @example
     * // Get one AgreementTrail
     * const agreementTrail = await prisma.agreementTrail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgreementTrailFindUniqueOrThrowArgs>(args: SelectSubset<T, AgreementTrailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgreementTrail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailFindFirstArgs} args - Arguments to find a AgreementTrail
     * @example
     * // Get one AgreementTrail
     * const agreementTrail = await prisma.agreementTrail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgreementTrailFindFirstArgs>(args?: SelectSubset<T, AgreementTrailFindFirstArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgreementTrail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailFindFirstOrThrowArgs} args - Arguments to find a AgreementTrail
     * @example
     * // Get one AgreementTrail
     * const agreementTrail = await prisma.agreementTrail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgreementTrailFindFirstOrThrowArgs>(args?: SelectSubset<T, AgreementTrailFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgreementTrails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgreementTrails
     * const agreementTrails = await prisma.agreementTrail.findMany()
     * 
     * // Get first 10 AgreementTrails
     * const agreementTrails = await prisma.agreementTrail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agreementTrailWithIdOnly = await prisma.agreementTrail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgreementTrailFindManyArgs>(args?: SelectSubset<T, AgreementTrailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgreementTrail.
     * @param {AgreementTrailCreateArgs} args - Arguments to create a AgreementTrail.
     * @example
     * // Create one AgreementTrail
     * const AgreementTrail = await prisma.agreementTrail.create({
     *   data: {
     *     // ... data to create a AgreementTrail
     *   }
     * })
     * 
     */
    create<T extends AgreementTrailCreateArgs>(args: SelectSubset<T, AgreementTrailCreateArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgreementTrails.
     * @param {AgreementTrailCreateManyArgs} args - Arguments to create many AgreementTrails.
     * @example
     * // Create many AgreementTrails
     * const agreementTrail = await prisma.agreementTrail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgreementTrailCreateManyArgs>(args?: SelectSubset<T, AgreementTrailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgreementTrails and returns the data saved in the database.
     * @param {AgreementTrailCreateManyAndReturnArgs} args - Arguments to create many AgreementTrails.
     * @example
     * // Create many AgreementTrails
     * const agreementTrail = await prisma.agreementTrail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgreementTrails and only return the `id`
     * const agreementTrailWithIdOnly = await prisma.agreementTrail.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgreementTrailCreateManyAndReturnArgs>(args?: SelectSubset<T, AgreementTrailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgreementTrail.
     * @param {AgreementTrailDeleteArgs} args - Arguments to delete one AgreementTrail.
     * @example
     * // Delete one AgreementTrail
     * const AgreementTrail = await prisma.agreementTrail.delete({
     *   where: {
     *     // ... filter to delete one AgreementTrail
     *   }
     * })
     * 
     */
    delete<T extends AgreementTrailDeleteArgs>(args: SelectSubset<T, AgreementTrailDeleteArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgreementTrail.
     * @param {AgreementTrailUpdateArgs} args - Arguments to update one AgreementTrail.
     * @example
     * // Update one AgreementTrail
     * const agreementTrail = await prisma.agreementTrail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgreementTrailUpdateArgs>(args: SelectSubset<T, AgreementTrailUpdateArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgreementTrails.
     * @param {AgreementTrailDeleteManyArgs} args - Arguments to filter AgreementTrails to delete.
     * @example
     * // Delete a few AgreementTrails
     * const { count } = await prisma.agreementTrail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgreementTrailDeleteManyArgs>(args?: SelectSubset<T, AgreementTrailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgreementTrails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgreementTrails
     * const agreementTrail = await prisma.agreementTrail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgreementTrailUpdateManyArgs>(args: SelectSubset<T, AgreementTrailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgreementTrails and returns the data updated in the database.
     * @param {AgreementTrailUpdateManyAndReturnArgs} args - Arguments to update many AgreementTrails.
     * @example
     * // Update many AgreementTrails
     * const agreementTrail = await prisma.agreementTrail.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgreementTrails and only return the `id`
     * const agreementTrailWithIdOnly = await prisma.agreementTrail.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgreementTrailUpdateManyAndReturnArgs>(args: SelectSubset<T, AgreementTrailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgreementTrail.
     * @param {AgreementTrailUpsertArgs} args - Arguments to update or create a AgreementTrail.
     * @example
     * // Update or create a AgreementTrail
     * const agreementTrail = await prisma.agreementTrail.upsert({
     *   create: {
     *     // ... data to create a AgreementTrail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgreementTrail we want to update
     *   }
     * })
     */
    upsert<T extends AgreementTrailUpsertArgs>(args: SelectSubset<T, AgreementTrailUpsertArgs<ExtArgs>>): Prisma__AgreementTrailClient<$Result.GetResult<Prisma.$AgreementTrailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgreementTrails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailCountArgs} args - Arguments to filter AgreementTrails to count.
     * @example
     * // Count the number of AgreementTrails
     * const count = await prisma.agreementTrail.count({
     *   where: {
     *     // ... the filter for the AgreementTrails we want to count
     *   }
     * })
    **/
    count<T extends AgreementTrailCountArgs>(
      args?: Subset<T, AgreementTrailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgreementTrailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgreementTrail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgreementTrailAggregateArgs>(args: Subset<T, AgreementTrailAggregateArgs>): Prisma.PrismaPromise<GetAgreementTrailAggregateType<T>>

    /**
     * Group by AgreementTrail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementTrailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgreementTrailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgreementTrailGroupByArgs['orderBy'] }
        : { orderBy?: AgreementTrailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgreementTrailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgreementTrailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgreementTrail model
   */
  readonly fields: AgreementTrailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgreementTrail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgreementTrailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agreement<T extends AgreementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgreementDefaultArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    actor<T extends AgreementTrail$actorArgs<ExtArgs> = {}>(args?: Subset<T, AgreementTrail$actorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgreementTrail model
   */
  interface AgreementTrailFieldRefs {
    readonly id: FieldRef<"AgreementTrail", 'Int'>
    readonly agreementId: FieldRef<"AgreementTrail", 'Int'>
    readonly actorId: FieldRef<"AgreementTrail", 'Int'>
    readonly actorRole: FieldRef<"AgreementTrail", 'ActorRole'>
    readonly actorAction: FieldRef<"AgreementTrail", 'ActorAction'>
    readonly createdAt: FieldRef<"AgreementTrail", 'DateTime'>
    readonly ipAddress: FieldRef<"AgreementTrail", 'String'>
    readonly previousLogHash: FieldRef<"AgreementTrail", 'String'>
    readonly logHash: FieldRef<"AgreementTrail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AgreementTrail findUnique
   */
  export type AgreementTrailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * Filter, which AgreementTrail to fetch.
     */
    where: AgreementTrailWhereUniqueInput
  }

  /**
   * AgreementTrail findUniqueOrThrow
   */
  export type AgreementTrailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * Filter, which AgreementTrail to fetch.
     */
    where: AgreementTrailWhereUniqueInput
  }

  /**
   * AgreementTrail findFirst
   */
  export type AgreementTrailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * Filter, which AgreementTrail to fetch.
     */
    where?: AgreementTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementTrails to fetch.
     */
    orderBy?: AgreementTrailOrderByWithRelationInput | AgreementTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgreementTrails.
     */
    cursor?: AgreementTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementTrails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgreementTrails.
     */
    distinct?: AgreementTrailScalarFieldEnum | AgreementTrailScalarFieldEnum[]
  }

  /**
   * AgreementTrail findFirstOrThrow
   */
  export type AgreementTrailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * Filter, which AgreementTrail to fetch.
     */
    where?: AgreementTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementTrails to fetch.
     */
    orderBy?: AgreementTrailOrderByWithRelationInput | AgreementTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgreementTrails.
     */
    cursor?: AgreementTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementTrails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgreementTrails.
     */
    distinct?: AgreementTrailScalarFieldEnum | AgreementTrailScalarFieldEnum[]
  }

  /**
   * AgreementTrail findMany
   */
  export type AgreementTrailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * Filter, which AgreementTrails to fetch.
     */
    where?: AgreementTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementTrails to fetch.
     */
    orderBy?: AgreementTrailOrderByWithRelationInput | AgreementTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgreementTrails.
     */
    cursor?: AgreementTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementTrails.
     */
    skip?: number
    distinct?: AgreementTrailScalarFieldEnum | AgreementTrailScalarFieldEnum[]
  }

  /**
   * AgreementTrail create
   */
  export type AgreementTrailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * The data needed to create a AgreementTrail.
     */
    data: XOR<AgreementTrailCreateInput, AgreementTrailUncheckedCreateInput>
  }

  /**
   * AgreementTrail createMany
   */
  export type AgreementTrailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgreementTrails.
     */
    data: AgreementTrailCreateManyInput | AgreementTrailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgreementTrail createManyAndReturn
   */
  export type AgreementTrailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * The data used to create many AgreementTrails.
     */
    data: AgreementTrailCreateManyInput | AgreementTrailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgreementTrail update
   */
  export type AgreementTrailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * The data needed to update a AgreementTrail.
     */
    data: XOR<AgreementTrailUpdateInput, AgreementTrailUncheckedUpdateInput>
    /**
     * Choose, which AgreementTrail to update.
     */
    where: AgreementTrailWhereUniqueInput
  }

  /**
   * AgreementTrail updateMany
   */
  export type AgreementTrailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgreementTrails.
     */
    data: XOR<AgreementTrailUpdateManyMutationInput, AgreementTrailUncheckedUpdateManyInput>
    /**
     * Filter which AgreementTrails to update
     */
    where?: AgreementTrailWhereInput
    /**
     * Limit how many AgreementTrails to update.
     */
    limit?: number
  }

  /**
   * AgreementTrail updateManyAndReturn
   */
  export type AgreementTrailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * The data used to update AgreementTrails.
     */
    data: XOR<AgreementTrailUpdateManyMutationInput, AgreementTrailUncheckedUpdateManyInput>
    /**
     * Filter which AgreementTrails to update
     */
    where?: AgreementTrailWhereInput
    /**
     * Limit how many AgreementTrails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgreementTrail upsert
   */
  export type AgreementTrailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * The filter to search for the AgreementTrail to update in case it exists.
     */
    where: AgreementTrailWhereUniqueInput
    /**
     * In case the AgreementTrail found by the `where` argument doesn't exist, create a new AgreementTrail with this data.
     */
    create: XOR<AgreementTrailCreateInput, AgreementTrailUncheckedCreateInput>
    /**
     * In case the AgreementTrail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgreementTrailUpdateInput, AgreementTrailUncheckedUpdateInput>
  }

  /**
   * AgreementTrail delete
   */
  export type AgreementTrailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
    /**
     * Filter which AgreementTrail to delete.
     */
    where: AgreementTrailWhereUniqueInput
  }

  /**
   * AgreementTrail deleteMany
   */
  export type AgreementTrailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgreementTrails to delete
     */
    where?: AgreementTrailWhereInput
    /**
     * Limit how many AgreementTrails to delete.
     */
    limit?: number
  }

  /**
   * AgreementTrail.actor
   */
  export type AgreementTrail$actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AgreementTrail without action
   */
  export type AgreementTrailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementTrail
     */
    select?: AgreementTrailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementTrail
     */
    omit?: AgreementTrailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementTrailInclude<ExtArgs> | null
  }


  /**
   * Model AgreementSigner
   */

  export type AggregateAgreementSigner = {
    _count: AgreementSignerCountAggregateOutputType | null
    _avg: AgreementSignerAvgAggregateOutputType | null
    _sum: AgreementSignerSumAggregateOutputType | null
    _min: AgreementSignerMinAggregateOutputType | null
    _max: AgreementSignerMaxAggregateOutputType | null
  }

  export type AgreementSignerAvgAggregateOutputType = {
    id: number | null
    agreementId: number | null
  }

  export type AgreementSignerSumAggregateOutputType = {
    id: number | null
    agreementId: number | null
  }

  export type AgreementSignerMinAggregateOutputType = {
    id: number | null
    agreementId: number | null
    signerEmail: string | null
    signerName: string | null
    status: $Enums.SignerStatus | null
    signedAt: Date | null
    signatureCoords: string | null
  }

  export type AgreementSignerMaxAggregateOutputType = {
    id: number | null
    agreementId: number | null
    signerEmail: string | null
    signerName: string | null
    status: $Enums.SignerStatus | null
    signedAt: Date | null
    signatureCoords: string | null
  }

  export type AgreementSignerCountAggregateOutputType = {
    id: number
    agreementId: number
    signerEmail: number
    signerName: number
    status: number
    signedAt: number
    signatureCoords: number
    _all: number
  }


  export type AgreementSignerAvgAggregateInputType = {
    id?: true
    agreementId?: true
  }

  export type AgreementSignerSumAggregateInputType = {
    id?: true
    agreementId?: true
  }

  export type AgreementSignerMinAggregateInputType = {
    id?: true
    agreementId?: true
    signerEmail?: true
    signerName?: true
    status?: true
    signedAt?: true
    signatureCoords?: true
  }

  export type AgreementSignerMaxAggregateInputType = {
    id?: true
    agreementId?: true
    signerEmail?: true
    signerName?: true
    status?: true
    signedAt?: true
    signatureCoords?: true
  }

  export type AgreementSignerCountAggregateInputType = {
    id?: true
    agreementId?: true
    signerEmail?: true
    signerName?: true
    status?: true
    signedAt?: true
    signatureCoords?: true
    _all?: true
  }

  export type AgreementSignerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgreementSigner to aggregate.
     */
    where?: AgreementSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementSigners to fetch.
     */
    orderBy?: AgreementSignerOrderByWithRelationInput | AgreementSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgreementSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementSigners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgreementSigners
    **/
    _count?: true | AgreementSignerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgreementSignerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgreementSignerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgreementSignerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgreementSignerMaxAggregateInputType
  }

  export type GetAgreementSignerAggregateType<T extends AgreementSignerAggregateArgs> = {
        [P in keyof T & keyof AggregateAgreementSigner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgreementSigner[P]>
      : GetScalarType<T[P], AggregateAgreementSigner[P]>
  }




  export type AgreementSignerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementSignerWhereInput
    orderBy?: AgreementSignerOrderByWithAggregationInput | AgreementSignerOrderByWithAggregationInput[]
    by: AgreementSignerScalarFieldEnum[] | AgreementSignerScalarFieldEnum
    having?: AgreementSignerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgreementSignerCountAggregateInputType | true
    _avg?: AgreementSignerAvgAggregateInputType
    _sum?: AgreementSignerSumAggregateInputType
    _min?: AgreementSignerMinAggregateInputType
    _max?: AgreementSignerMaxAggregateInputType
  }

  export type AgreementSignerGroupByOutputType = {
    id: number
    agreementId: number
    signerEmail: string
    signerName: string | null
    status: $Enums.SignerStatus
    signedAt: Date | null
    signatureCoords: string | null
    _count: AgreementSignerCountAggregateOutputType | null
    _avg: AgreementSignerAvgAggregateOutputType | null
    _sum: AgreementSignerSumAggregateOutputType | null
    _min: AgreementSignerMinAggregateOutputType | null
    _max: AgreementSignerMaxAggregateOutputType | null
  }

  type GetAgreementSignerGroupByPayload<T extends AgreementSignerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgreementSignerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgreementSignerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgreementSignerGroupByOutputType[P]>
            : GetScalarType<T[P], AgreementSignerGroupByOutputType[P]>
        }
      >
    >


  export type AgreementSignerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    signerName?: boolean
    status?: boolean
    signedAt?: boolean
    signatureCoords?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreementSigner"]>

  export type AgreementSignerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    signerName?: boolean
    status?: boolean
    signedAt?: boolean
    signatureCoords?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreementSigner"]>

  export type AgreementSignerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    signerName?: boolean
    status?: boolean
    signedAt?: boolean
    signatureCoords?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreementSigner"]>

  export type AgreementSignerSelectScalar = {
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    signerName?: boolean
    status?: boolean
    signedAt?: boolean
    signatureCoords?: boolean
  }

  export type AgreementSignerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agreementId" | "signerEmail" | "signerName" | "status" | "signedAt" | "signatureCoords", ExtArgs["result"]["agreementSigner"]>
  export type AgreementSignerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }
  export type AgreementSignerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }
  export type AgreementSignerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }

  export type $AgreementSignerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgreementSigner"
    objects: {
      agreement: Prisma.$AgreementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      agreementId: number
      signerEmail: string
      signerName: string | null
      status: $Enums.SignerStatus
      signedAt: Date | null
      signatureCoords: string | null
    }, ExtArgs["result"]["agreementSigner"]>
    composites: {}
  }

  type AgreementSignerGetPayload<S extends boolean | null | undefined | AgreementSignerDefaultArgs> = $Result.GetResult<Prisma.$AgreementSignerPayload, S>

  type AgreementSignerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgreementSignerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgreementSignerCountAggregateInputType | true
    }

  export interface AgreementSignerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgreementSigner'], meta: { name: 'AgreementSigner' } }
    /**
     * Find zero or one AgreementSigner that matches the filter.
     * @param {AgreementSignerFindUniqueArgs} args - Arguments to find a AgreementSigner
     * @example
     * // Get one AgreementSigner
     * const agreementSigner = await prisma.agreementSigner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgreementSignerFindUniqueArgs>(args: SelectSubset<T, AgreementSignerFindUniqueArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgreementSigner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgreementSignerFindUniqueOrThrowArgs} args - Arguments to find a AgreementSigner
     * @example
     * // Get one AgreementSigner
     * const agreementSigner = await prisma.agreementSigner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgreementSignerFindUniqueOrThrowArgs>(args: SelectSubset<T, AgreementSignerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgreementSigner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerFindFirstArgs} args - Arguments to find a AgreementSigner
     * @example
     * // Get one AgreementSigner
     * const agreementSigner = await prisma.agreementSigner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgreementSignerFindFirstArgs>(args?: SelectSubset<T, AgreementSignerFindFirstArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgreementSigner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerFindFirstOrThrowArgs} args - Arguments to find a AgreementSigner
     * @example
     * // Get one AgreementSigner
     * const agreementSigner = await prisma.agreementSigner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgreementSignerFindFirstOrThrowArgs>(args?: SelectSubset<T, AgreementSignerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgreementSigners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgreementSigners
     * const agreementSigners = await prisma.agreementSigner.findMany()
     * 
     * // Get first 10 AgreementSigners
     * const agreementSigners = await prisma.agreementSigner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agreementSignerWithIdOnly = await prisma.agreementSigner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgreementSignerFindManyArgs>(args?: SelectSubset<T, AgreementSignerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgreementSigner.
     * @param {AgreementSignerCreateArgs} args - Arguments to create a AgreementSigner.
     * @example
     * // Create one AgreementSigner
     * const AgreementSigner = await prisma.agreementSigner.create({
     *   data: {
     *     // ... data to create a AgreementSigner
     *   }
     * })
     * 
     */
    create<T extends AgreementSignerCreateArgs>(args: SelectSubset<T, AgreementSignerCreateArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgreementSigners.
     * @param {AgreementSignerCreateManyArgs} args - Arguments to create many AgreementSigners.
     * @example
     * // Create many AgreementSigners
     * const agreementSigner = await prisma.agreementSigner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgreementSignerCreateManyArgs>(args?: SelectSubset<T, AgreementSignerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgreementSigners and returns the data saved in the database.
     * @param {AgreementSignerCreateManyAndReturnArgs} args - Arguments to create many AgreementSigners.
     * @example
     * // Create many AgreementSigners
     * const agreementSigner = await prisma.agreementSigner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgreementSigners and only return the `id`
     * const agreementSignerWithIdOnly = await prisma.agreementSigner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgreementSignerCreateManyAndReturnArgs>(args?: SelectSubset<T, AgreementSignerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgreementSigner.
     * @param {AgreementSignerDeleteArgs} args - Arguments to delete one AgreementSigner.
     * @example
     * // Delete one AgreementSigner
     * const AgreementSigner = await prisma.agreementSigner.delete({
     *   where: {
     *     // ... filter to delete one AgreementSigner
     *   }
     * })
     * 
     */
    delete<T extends AgreementSignerDeleteArgs>(args: SelectSubset<T, AgreementSignerDeleteArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgreementSigner.
     * @param {AgreementSignerUpdateArgs} args - Arguments to update one AgreementSigner.
     * @example
     * // Update one AgreementSigner
     * const agreementSigner = await prisma.agreementSigner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgreementSignerUpdateArgs>(args: SelectSubset<T, AgreementSignerUpdateArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgreementSigners.
     * @param {AgreementSignerDeleteManyArgs} args - Arguments to filter AgreementSigners to delete.
     * @example
     * // Delete a few AgreementSigners
     * const { count } = await prisma.agreementSigner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgreementSignerDeleteManyArgs>(args?: SelectSubset<T, AgreementSignerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgreementSigners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgreementSigners
     * const agreementSigner = await prisma.agreementSigner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgreementSignerUpdateManyArgs>(args: SelectSubset<T, AgreementSignerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgreementSigners and returns the data updated in the database.
     * @param {AgreementSignerUpdateManyAndReturnArgs} args - Arguments to update many AgreementSigners.
     * @example
     * // Update many AgreementSigners
     * const agreementSigner = await prisma.agreementSigner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgreementSigners and only return the `id`
     * const agreementSignerWithIdOnly = await prisma.agreementSigner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgreementSignerUpdateManyAndReturnArgs>(args: SelectSubset<T, AgreementSignerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgreementSigner.
     * @param {AgreementSignerUpsertArgs} args - Arguments to update or create a AgreementSigner.
     * @example
     * // Update or create a AgreementSigner
     * const agreementSigner = await prisma.agreementSigner.upsert({
     *   create: {
     *     // ... data to create a AgreementSigner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgreementSigner we want to update
     *   }
     * })
     */
    upsert<T extends AgreementSignerUpsertArgs>(args: SelectSubset<T, AgreementSignerUpsertArgs<ExtArgs>>): Prisma__AgreementSignerClient<$Result.GetResult<Prisma.$AgreementSignerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgreementSigners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerCountArgs} args - Arguments to filter AgreementSigners to count.
     * @example
     * // Count the number of AgreementSigners
     * const count = await prisma.agreementSigner.count({
     *   where: {
     *     // ... the filter for the AgreementSigners we want to count
     *   }
     * })
    **/
    count<T extends AgreementSignerCountArgs>(
      args?: Subset<T, AgreementSignerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgreementSignerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgreementSigner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgreementSignerAggregateArgs>(args: Subset<T, AgreementSignerAggregateArgs>): Prisma.PrismaPromise<GetAgreementSignerAggregateType<T>>

    /**
     * Group by AgreementSigner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementSignerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgreementSignerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgreementSignerGroupByArgs['orderBy'] }
        : { orderBy?: AgreementSignerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgreementSignerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgreementSignerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgreementSigner model
   */
  readonly fields: AgreementSignerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgreementSigner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgreementSignerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agreement<T extends AgreementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgreementDefaultArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgreementSigner model
   */
  interface AgreementSignerFieldRefs {
    readonly id: FieldRef<"AgreementSigner", 'Int'>
    readonly agreementId: FieldRef<"AgreementSigner", 'Int'>
    readonly signerEmail: FieldRef<"AgreementSigner", 'String'>
    readonly signerName: FieldRef<"AgreementSigner", 'String'>
    readonly status: FieldRef<"AgreementSigner", 'SignerStatus'>
    readonly signedAt: FieldRef<"AgreementSigner", 'DateTime'>
    readonly signatureCoords: FieldRef<"AgreementSigner", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AgreementSigner findUnique
   */
  export type AgreementSignerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * Filter, which AgreementSigner to fetch.
     */
    where: AgreementSignerWhereUniqueInput
  }

  /**
   * AgreementSigner findUniqueOrThrow
   */
  export type AgreementSignerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * Filter, which AgreementSigner to fetch.
     */
    where: AgreementSignerWhereUniqueInput
  }

  /**
   * AgreementSigner findFirst
   */
  export type AgreementSignerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * Filter, which AgreementSigner to fetch.
     */
    where?: AgreementSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementSigners to fetch.
     */
    orderBy?: AgreementSignerOrderByWithRelationInput | AgreementSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgreementSigners.
     */
    cursor?: AgreementSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementSigners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgreementSigners.
     */
    distinct?: AgreementSignerScalarFieldEnum | AgreementSignerScalarFieldEnum[]
  }

  /**
   * AgreementSigner findFirstOrThrow
   */
  export type AgreementSignerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * Filter, which AgreementSigner to fetch.
     */
    where?: AgreementSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementSigners to fetch.
     */
    orderBy?: AgreementSignerOrderByWithRelationInput | AgreementSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgreementSigners.
     */
    cursor?: AgreementSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementSigners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgreementSigners.
     */
    distinct?: AgreementSignerScalarFieldEnum | AgreementSignerScalarFieldEnum[]
  }

  /**
   * AgreementSigner findMany
   */
  export type AgreementSignerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * Filter, which AgreementSigners to fetch.
     */
    where?: AgreementSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgreementSigners to fetch.
     */
    orderBy?: AgreementSignerOrderByWithRelationInput | AgreementSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgreementSigners.
     */
    cursor?: AgreementSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgreementSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgreementSigners.
     */
    skip?: number
    distinct?: AgreementSignerScalarFieldEnum | AgreementSignerScalarFieldEnum[]
  }

  /**
   * AgreementSigner create
   */
  export type AgreementSignerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * The data needed to create a AgreementSigner.
     */
    data: XOR<AgreementSignerCreateInput, AgreementSignerUncheckedCreateInput>
  }

  /**
   * AgreementSigner createMany
   */
  export type AgreementSignerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgreementSigners.
     */
    data: AgreementSignerCreateManyInput | AgreementSignerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgreementSigner createManyAndReturn
   */
  export type AgreementSignerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * The data used to create many AgreementSigners.
     */
    data: AgreementSignerCreateManyInput | AgreementSignerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgreementSigner update
   */
  export type AgreementSignerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * The data needed to update a AgreementSigner.
     */
    data: XOR<AgreementSignerUpdateInput, AgreementSignerUncheckedUpdateInput>
    /**
     * Choose, which AgreementSigner to update.
     */
    where: AgreementSignerWhereUniqueInput
  }

  /**
   * AgreementSigner updateMany
   */
  export type AgreementSignerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgreementSigners.
     */
    data: XOR<AgreementSignerUpdateManyMutationInput, AgreementSignerUncheckedUpdateManyInput>
    /**
     * Filter which AgreementSigners to update
     */
    where?: AgreementSignerWhereInput
    /**
     * Limit how many AgreementSigners to update.
     */
    limit?: number
  }

  /**
   * AgreementSigner updateManyAndReturn
   */
  export type AgreementSignerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * The data used to update AgreementSigners.
     */
    data: XOR<AgreementSignerUpdateManyMutationInput, AgreementSignerUncheckedUpdateManyInput>
    /**
     * Filter which AgreementSigners to update
     */
    where?: AgreementSignerWhereInput
    /**
     * Limit how many AgreementSigners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgreementSigner upsert
   */
  export type AgreementSignerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * The filter to search for the AgreementSigner to update in case it exists.
     */
    where: AgreementSignerWhereUniqueInput
    /**
     * In case the AgreementSigner found by the `where` argument doesn't exist, create a new AgreementSigner with this data.
     */
    create: XOR<AgreementSignerCreateInput, AgreementSignerUncheckedCreateInput>
    /**
     * In case the AgreementSigner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgreementSignerUpdateInput, AgreementSignerUncheckedUpdateInput>
  }

  /**
   * AgreementSigner delete
   */
  export type AgreementSignerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
    /**
     * Filter which AgreementSigner to delete.
     */
    where: AgreementSignerWhereUniqueInput
  }

  /**
   * AgreementSigner deleteMany
   */
  export type AgreementSignerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgreementSigners to delete
     */
    where?: AgreementSignerWhereInput
    /**
     * Limit how many AgreementSigners to delete.
     */
    limit?: number
  }

  /**
   * AgreementSigner without action
   */
  export type AgreementSignerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgreementSigner
     */
    select?: AgreementSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgreementSigner
     */
    omit?: AgreementSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementSignerInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
    fileSize: number | null
  }

  export type DocumentSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
    fileSize: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: number | null
    name: string | null
    fileUrl: string | null
    creatorId: number | null
    createdAt: Date | null
    mimeType: string | null
    fileSize: number | null
    originalFilename: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    fileUrl: string | null
    creatorId: number | null
    createdAt: Date | null
    mimeType: string | null
    fileSize: number | null
    originalFilename: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    name: number
    fileUrl: number
    creatorId: number
    createdAt: number
    mimeType: number
    fileSize: number
    originalFilename: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    id?: true
    creatorId?: true
    fileSize?: true
  }

  export type DocumentSumAggregateInputType = {
    id?: true
    creatorId?: true
    fileSize?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    name?: true
    fileUrl?: true
    creatorId?: true
    createdAt?: true
    mimeType?: true
    fileSize?: true
    originalFilename?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    name?: true
    fileUrl?: true
    creatorId?: true
    createdAt?: true
    mimeType?: true
    fileSize?: true
    originalFilename?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    name?: true
    fileUrl?: true
    creatorId?: true
    createdAt?: true
    mimeType?: true
    fileSize?: true
    originalFilename?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: number
    name: string
    fileUrl: string | null
    creatorId: number
    createdAt: Date
    mimeType: string | null
    fileSize: number | null
    originalFilename: string | null
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fileUrl?: boolean
    creatorId?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fileUrl?: boolean
    creatorId?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fileUrl?: boolean
    creatorId?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    name?: boolean
    fileUrl?: boolean
    creatorId?: boolean
    createdAt?: boolean
    mimeType?: boolean
    fileSize?: boolean
    originalFilename?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "fileUrl" | "creatorId" | "createdAt" | "mimeType" | "fileSize" | "originalFilename", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      fileUrl: string | null
      creatorId: number
      createdAt: Date
      mimeType: string | null
      fileSize: number | null
      originalFilename: string | null
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'Int'>
    readonly name: FieldRef<"Document", 'String'>
    readonly fileUrl: FieldRef<"Document", 'String'>
    readonly creatorId: FieldRef<"Document", 'Int'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly mimeType: FieldRef<"Document", 'String'>
    readonly fileSize: FieldRef<"Document", 'Int'>
    readonly originalFilename: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
    creatorId: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
    creatorId: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    creatorId: number | null
    createdAt: Date | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    creatorId: number | null
    createdAt: Date | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    email: number
    name: number
    creatorId: number
    createdAt: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
    creatorId?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
    creatorId?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    creatorId?: true
    createdAt?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    creatorId?: true
    createdAt?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    creatorId?: true
    createdAt?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: number
    email: string
    name: string
    creatorId: number
    createdAt: Date
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    creatorId?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    creatorId?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    creatorId?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    creatorId?: boolean
    createdAt?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "creatorId" | "createdAt", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      creatorId: number
      createdAt: Date
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'Int'>
    readonly email: FieldRef<"Contact", 'String'>
    readonly name: FieldRef<"Contact", 'String'>
    readonly creatorId: FieldRef<"Contact", 'Int'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model SigningToken
   */

  export type AggregateSigningToken = {
    _count: SigningTokenCountAggregateOutputType | null
    _avg: SigningTokenAvgAggregateOutputType | null
    _sum: SigningTokenSumAggregateOutputType | null
    _min: SigningTokenMinAggregateOutputType | null
    _max: SigningTokenMaxAggregateOutputType | null
  }

  export type SigningTokenAvgAggregateOutputType = {
    id: number | null
    agreementId: number | null
  }

  export type SigningTokenSumAggregateOutputType = {
    id: number | null
    agreementId: number | null
  }

  export type SigningTokenMinAggregateOutputType = {
    id: number | null
    agreementId: number | null
    signerEmail: string | null
    token: string | null
    expiresAt: Date | null
    usedAt: Date | null
  }

  export type SigningTokenMaxAggregateOutputType = {
    id: number | null
    agreementId: number | null
    signerEmail: string | null
    token: string | null
    expiresAt: Date | null
    usedAt: Date | null
  }

  export type SigningTokenCountAggregateOutputType = {
    id: number
    agreementId: number
    signerEmail: number
    token: number
    expiresAt: number
    usedAt: number
    _all: number
  }


  export type SigningTokenAvgAggregateInputType = {
    id?: true
    agreementId?: true
  }

  export type SigningTokenSumAggregateInputType = {
    id?: true
    agreementId?: true
  }

  export type SigningTokenMinAggregateInputType = {
    id?: true
    agreementId?: true
    signerEmail?: true
    token?: true
    expiresAt?: true
    usedAt?: true
  }

  export type SigningTokenMaxAggregateInputType = {
    id?: true
    agreementId?: true
    signerEmail?: true
    token?: true
    expiresAt?: true
    usedAt?: true
  }

  export type SigningTokenCountAggregateInputType = {
    id?: true
    agreementId?: true
    signerEmail?: true
    token?: true
    expiresAt?: true
    usedAt?: true
    _all?: true
  }

  export type SigningTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SigningToken to aggregate.
     */
    where?: SigningTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SigningTokens to fetch.
     */
    orderBy?: SigningTokenOrderByWithRelationInput | SigningTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SigningTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SigningTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SigningTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SigningTokens
    **/
    _count?: true | SigningTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SigningTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SigningTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SigningTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SigningTokenMaxAggregateInputType
  }

  export type GetSigningTokenAggregateType<T extends SigningTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateSigningToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSigningToken[P]>
      : GetScalarType<T[P], AggregateSigningToken[P]>
  }




  export type SigningTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SigningTokenWhereInput
    orderBy?: SigningTokenOrderByWithAggregationInput | SigningTokenOrderByWithAggregationInput[]
    by: SigningTokenScalarFieldEnum[] | SigningTokenScalarFieldEnum
    having?: SigningTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SigningTokenCountAggregateInputType | true
    _avg?: SigningTokenAvgAggregateInputType
    _sum?: SigningTokenSumAggregateInputType
    _min?: SigningTokenMinAggregateInputType
    _max?: SigningTokenMaxAggregateInputType
  }

  export type SigningTokenGroupByOutputType = {
    id: number
    agreementId: number
    signerEmail: string
    token: string
    expiresAt: Date | null
    usedAt: Date | null
    _count: SigningTokenCountAggregateOutputType | null
    _avg: SigningTokenAvgAggregateOutputType | null
    _sum: SigningTokenSumAggregateOutputType | null
    _min: SigningTokenMinAggregateOutputType | null
    _max: SigningTokenMaxAggregateOutputType | null
  }

  type GetSigningTokenGroupByPayload<T extends SigningTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SigningTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SigningTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SigningTokenGroupByOutputType[P]>
            : GetScalarType<T[P], SigningTokenGroupByOutputType[P]>
        }
      >
    >


  export type SigningTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signingToken"]>

  export type SigningTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signingToken"]>

  export type SigningTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signingToken"]>

  export type SigningTokenSelectScalar = {
    id?: boolean
    agreementId?: boolean
    signerEmail?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
  }

  export type SigningTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agreementId" | "signerEmail" | "token" | "expiresAt" | "usedAt", ExtArgs["result"]["signingToken"]>
  export type SigningTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }
  export type SigningTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }
  export type SigningTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreement?: boolean | AgreementDefaultArgs<ExtArgs>
  }

  export type $SigningTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SigningToken"
    objects: {
      agreement: Prisma.$AgreementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      agreementId: number
      signerEmail: string
      token: string
      expiresAt: Date | null
      usedAt: Date | null
    }, ExtArgs["result"]["signingToken"]>
    composites: {}
  }

  type SigningTokenGetPayload<S extends boolean | null | undefined | SigningTokenDefaultArgs> = $Result.GetResult<Prisma.$SigningTokenPayload, S>

  type SigningTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SigningTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SigningTokenCountAggregateInputType | true
    }

  export interface SigningTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SigningToken'], meta: { name: 'SigningToken' } }
    /**
     * Find zero or one SigningToken that matches the filter.
     * @param {SigningTokenFindUniqueArgs} args - Arguments to find a SigningToken
     * @example
     * // Get one SigningToken
     * const signingToken = await prisma.signingToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SigningTokenFindUniqueArgs>(args: SelectSubset<T, SigningTokenFindUniqueArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SigningToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SigningTokenFindUniqueOrThrowArgs} args - Arguments to find a SigningToken
     * @example
     * // Get one SigningToken
     * const signingToken = await prisma.signingToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SigningTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, SigningTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SigningToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenFindFirstArgs} args - Arguments to find a SigningToken
     * @example
     * // Get one SigningToken
     * const signingToken = await prisma.signingToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SigningTokenFindFirstArgs>(args?: SelectSubset<T, SigningTokenFindFirstArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SigningToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenFindFirstOrThrowArgs} args - Arguments to find a SigningToken
     * @example
     * // Get one SigningToken
     * const signingToken = await prisma.signingToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SigningTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, SigningTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SigningTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SigningTokens
     * const signingTokens = await prisma.signingToken.findMany()
     * 
     * // Get first 10 SigningTokens
     * const signingTokens = await prisma.signingToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const signingTokenWithIdOnly = await prisma.signingToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SigningTokenFindManyArgs>(args?: SelectSubset<T, SigningTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SigningToken.
     * @param {SigningTokenCreateArgs} args - Arguments to create a SigningToken.
     * @example
     * // Create one SigningToken
     * const SigningToken = await prisma.signingToken.create({
     *   data: {
     *     // ... data to create a SigningToken
     *   }
     * })
     * 
     */
    create<T extends SigningTokenCreateArgs>(args: SelectSubset<T, SigningTokenCreateArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SigningTokens.
     * @param {SigningTokenCreateManyArgs} args - Arguments to create many SigningTokens.
     * @example
     * // Create many SigningTokens
     * const signingToken = await prisma.signingToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SigningTokenCreateManyArgs>(args?: SelectSubset<T, SigningTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SigningTokens and returns the data saved in the database.
     * @param {SigningTokenCreateManyAndReturnArgs} args - Arguments to create many SigningTokens.
     * @example
     * // Create many SigningTokens
     * const signingToken = await prisma.signingToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SigningTokens and only return the `id`
     * const signingTokenWithIdOnly = await prisma.signingToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SigningTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, SigningTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SigningToken.
     * @param {SigningTokenDeleteArgs} args - Arguments to delete one SigningToken.
     * @example
     * // Delete one SigningToken
     * const SigningToken = await prisma.signingToken.delete({
     *   where: {
     *     // ... filter to delete one SigningToken
     *   }
     * })
     * 
     */
    delete<T extends SigningTokenDeleteArgs>(args: SelectSubset<T, SigningTokenDeleteArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SigningToken.
     * @param {SigningTokenUpdateArgs} args - Arguments to update one SigningToken.
     * @example
     * // Update one SigningToken
     * const signingToken = await prisma.signingToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SigningTokenUpdateArgs>(args: SelectSubset<T, SigningTokenUpdateArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SigningTokens.
     * @param {SigningTokenDeleteManyArgs} args - Arguments to filter SigningTokens to delete.
     * @example
     * // Delete a few SigningTokens
     * const { count } = await prisma.signingToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SigningTokenDeleteManyArgs>(args?: SelectSubset<T, SigningTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SigningTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SigningTokens
     * const signingToken = await prisma.signingToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SigningTokenUpdateManyArgs>(args: SelectSubset<T, SigningTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SigningTokens and returns the data updated in the database.
     * @param {SigningTokenUpdateManyAndReturnArgs} args - Arguments to update many SigningTokens.
     * @example
     * // Update many SigningTokens
     * const signingToken = await prisma.signingToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SigningTokens and only return the `id`
     * const signingTokenWithIdOnly = await prisma.signingToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SigningTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, SigningTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SigningToken.
     * @param {SigningTokenUpsertArgs} args - Arguments to update or create a SigningToken.
     * @example
     * // Update or create a SigningToken
     * const signingToken = await prisma.signingToken.upsert({
     *   create: {
     *     // ... data to create a SigningToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SigningToken we want to update
     *   }
     * })
     */
    upsert<T extends SigningTokenUpsertArgs>(args: SelectSubset<T, SigningTokenUpsertArgs<ExtArgs>>): Prisma__SigningTokenClient<$Result.GetResult<Prisma.$SigningTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SigningTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenCountArgs} args - Arguments to filter SigningTokens to count.
     * @example
     * // Count the number of SigningTokens
     * const count = await prisma.signingToken.count({
     *   where: {
     *     // ... the filter for the SigningTokens we want to count
     *   }
     * })
    **/
    count<T extends SigningTokenCountArgs>(
      args?: Subset<T, SigningTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SigningTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SigningToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SigningTokenAggregateArgs>(args: Subset<T, SigningTokenAggregateArgs>): Prisma.PrismaPromise<GetSigningTokenAggregateType<T>>

    /**
     * Group by SigningToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SigningTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SigningTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SigningTokenGroupByArgs['orderBy'] }
        : { orderBy?: SigningTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SigningTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSigningTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SigningToken model
   */
  readonly fields: SigningTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SigningToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SigningTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agreement<T extends AgreementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgreementDefaultArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SigningToken model
   */
  interface SigningTokenFieldRefs {
    readonly id: FieldRef<"SigningToken", 'Int'>
    readonly agreementId: FieldRef<"SigningToken", 'Int'>
    readonly signerEmail: FieldRef<"SigningToken", 'String'>
    readonly token: FieldRef<"SigningToken", 'String'>
    readonly expiresAt: FieldRef<"SigningToken", 'DateTime'>
    readonly usedAt: FieldRef<"SigningToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SigningToken findUnique
   */
  export type SigningTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * Filter, which SigningToken to fetch.
     */
    where: SigningTokenWhereUniqueInput
  }

  /**
   * SigningToken findUniqueOrThrow
   */
  export type SigningTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * Filter, which SigningToken to fetch.
     */
    where: SigningTokenWhereUniqueInput
  }

  /**
   * SigningToken findFirst
   */
  export type SigningTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * Filter, which SigningToken to fetch.
     */
    where?: SigningTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SigningTokens to fetch.
     */
    orderBy?: SigningTokenOrderByWithRelationInput | SigningTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SigningTokens.
     */
    cursor?: SigningTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SigningTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SigningTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SigningTokens.
     */
    distinct?: SigningTokenScalarFieldEnum | SigningTokenScalarFieldEnum[]
  }

  /**
   * SigningToken findFirstOrThrow
   */
  export type SigningTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * Filter, which SigningToken to fetch.
     */
    where?: SigningTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SigningTokens to fetch.
     */
    orderBy?: SigningTokenOrderByWithRelationInput | SigningTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SigningTokens.
     */
    cursor?: SigningTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SigningTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SigningTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SigningTokens.
     */
    distinct?: SigningTokenScalarFieldEnum | SigningTokenScalarFieldEnum[]
  }

  /**
   * SigningToken findMany
   */
  export type SigningTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * Filter, which SigningTokens to fetch.
     */
    where?: SigningTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SigningTokens to fetch.
     */
    orderBy?: SigningTokenOrderByWithRelationInput | SigningTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SigningTokens.
     */
    cursor?: SigningTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SigningTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SigningTokens.
     */
    skip?: number
    distinct?: SigningTokenScalarFieldEnum | SigningTokenScalarFieldEnum[]
  }

  /**
   * SigningToken create
   */
  export type SigningTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a SigningToken.
     */
    data: XOR<SigningTokenCreateInput, SigningTokenUncheckedCreateInput>
  }

  /**
   * SigningToken createMany
   */
  export type SigningTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SigningTokens.
     */
    data: SigningTokenCreateManyInput | SigningTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SigningToken createManyAndReturn
   */
  export type SigningTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * The data used to create many SigningTokens.
     */
    data: SigningTokenCreateManyInput | SigningTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SigningToken update
   */
  export type SigningTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a SigningToken.
     */
    data: XOR<SigningTokenUpdateInput, SigningTokenUncheckedUpdateInput>
    /**
     * Choose, which SigningToken to update.
     */
    where: SigningTokenWhereUniqueInput
  }

  /**
   * SigningToken updateMany
   */
  export type SigningTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SigningTokens.
     */
    data: XOR<SigningTokenUpdateManyMutationInput, SigningTokenUncheckedUpdateManyInput>
    /**
     * Filter which SigningTokens to update
     */
    where?: SigningTokenWhereInput
    /**
     * Limit how many SigningTokens to update.
     */
    limit?: number
  }

  /**
   * SigningToken updateManyAndReturn
   */
  export type SigningTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * The data used to update SigningTokens.
     */
    data: XOR<SigningTokenUpdateManyMutationInput, SigningTokenUncheckedUpdateManyInput>
    /**
     * Filter which SigningTokens to update
     */
    where?: SigningTokenWhereInput
    /**
     * Limit how many SigningTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SigningToken upsert
   */
  export type SigningTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the SigningToken to update in case it exists.
     */
    where: SigningTokenWhereUniqueInput
    /**
     * In case the SigningToken found by the `where` argument doesn't exist, create a new SigningToken with this data.
     */
    create: XOR<SigningTokenCreateInput, SigningTokenUncheckedCreateInput>
    /**
     * In case the SigningToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SigningTokenUpdateInput, SigningTokenUncheckedUpdateInput>
  }

  /**
   * SigningToken delete
   */
  export type SigningTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
    /**
     * Filter which SigningToken to delete.
     */
    where: SigningTokenWhereUniqueInput
  }

  /**
   * SigningToken deleteMany
   */
  export type SigningTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SigningTokens to delete
     */
    where?: SigningTokenWhereInput
    /**
     * Limit how many SigningTokens to delete.
     */
    limit?: number
  }

  /**
   * SigningToken without action
   */
  export type SigningTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SigningToken
     */
    select?: SigningTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SigningToken
     */
    omit?: SigningTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SigningTokenInclude<ExtArgs> | null
  }


  /**
   * Model OtpToken
   */

  export type AggregateOtpToken = {
    _count: OtpTokenCountAggregateOutputType | null
    _avg: OtpTokenAvgAggregateOutputType | null
    _sum: OtpTokenSumAggregateOutputType | null
    _min: OtpTokenMinAggregateOutputType | null
    _max: OtpTokenMaxAggregateOutputType | null
  }

  export type OtpTokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OtpTokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OtpTokenMinAggregateOutputType = {
    id: number | null
    userId: number | null
    otpCode: string | null
    createdAt: Date | null
    expiresAt: Date | null
    verifiedAt: Date | null
    purpose: string | null
  }

  export type OtpTokenMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    otpCode: string | null
    createdAt: Date | null
    expiresAt: Date | null
    verifiedAt: Date | null
    purpose: string | null
  }

  export type OtpTokenCountAggregateOutputType = {
    id: number
    userId: number
    otpCode: number
    createdAt: number
    expiresAt: number
    verifiedAt: number
    purpose: number
    _all: number
  }


  export type OtpTokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OtpTokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OtpTokenMinAggregateInputType = {
    id?: true
    userId?: true
    otpCode?: true
    createdAt?: true
    expiresAt?: true
    verifiedAt?: true
    purpose?: true
  }

  export type OtpTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    otpCode?: true
    createdAt?: true
    expiresAt?: true
    verifiedAt?: true
    purpose?: true
  }

  export type OtpTokenCountAggregateInputType = {
    id?: true
    userId?: true
    otpCode?: true
    createdAt?: true
    expiresAt?: true
    verifiedAt?: true
    purpose?: true
    _all?: true
  }

  export type OtpTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpToken to aggregate.
     */
    where?: OtpTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpTokens to fetch.
     */
    orderBy?: OtpTokenOrderByWithRelationInput | OtpTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OtpTokens
    **/
    _count?: true | OtpTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OtpTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OtpTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpTokenMaxAggregateInputType
  }

  export type GetOtpTokenAggregateType<T extends OtpTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateOtpToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtpToken[P]>
      : GetScalarType<T[P], AggregateOtpToken[P]>
  }




  export type OtpTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpTokenWhereInput
    orderBy?: OtpTokenOrderByWithAggregationInput | OtpTokenOrderByWithAggregationInput[]
    by: OtpTokenScalarFieldEnum[] | OtpTokenScalarFieldEnum
    having?: OtpTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpTokenCountAggregateInputType | true
    _avg?: OtpTokenAvgAggregateInputType
    _sum?: OtpTokenSumAggregateInputType
    _min?: OtpTokenMinAggregateInputType
    _max?: OtpTokenMaxAggregateInputType
  }

  export type OtpTokenGroupByOutputType = {
    id: number
    userId: number
    otpCode: string
    createdAt: Date
    expiresAt: Date
    verifiedAt: Date | null
    purpose: string
    _count: OtpTokenCountAggregateOutputType | null
    _avg: OtpTokenAvgAggregateOutputType | null
    _sum: OtpTokenSumAggregateOutputType | null
    _min: OtpTokenMinAggregateOutputType | null
    _max: OtpTokenMaxAggregateOutputType | null
  }

  type GetOtpTokenGroupByPayload<T extends OtpTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpTokenGroupByOutputType[P]>
            : GetScalarType<T[P], OtpTokenGroupByOutputType[P]>
        }
      >
    >


  export type OtpTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    otpCode?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    verifiedAt?: boolean
    purpose?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otpToken"]>

  export type OtpTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    otpCode?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    verifiedAt?: boolean
    purpose?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otpToken"]>

  export type OtpTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    otpCode?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    verifiedAt?: boolean
    purpose?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otpToken"]>

  export type OtpTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    otpCode?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    verifiedAt?: boolean
    purpose?: boolean
  }

  export type OtpTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "otpCode" | "createdAt" | "expiresAt" | "verifiedAt" | "purpose", ExtArgs["result"]["otpToken"]>
  export type OtpTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OtpTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OtpTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OtpTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OtpToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      otpCode: string
      createdAt: Date
      expiresAt: Date
      verifiedAt: Date | null
      purpose: string
    }, ExtArgs["result"]["otpToken"]>
    composites: {}
  }

  type OtpTokenGetPayload<S extends boolean | null | undefined | OtpTokenDefaultArgs> = $Result.GetResult<Prisma.$OtpTokenPayload, S>

  type OtpTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OtpTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OtpTokenCountAggregateInputType | true
    }

  export interface OtpTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OtpToken'], meta: { name: 'OtpToken' } }
    /**
     * Find zero or one OtpToken that matches the filter.
     * @param {OtpTokenFindUniqueArgs} args - Arguments to find a OtpToken
     * @example
     * // Get one OtpToken
     * const otpToken = await prisma.otpToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpTokenFindUniqueArgs>(args: SelectSubset<T, OtpTokenFindUniqueArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OtpToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OtpTokenFindUniqueOrThrowArgs} args - Arguments to find a OtpToken
     * @example
     * // Get one OtpToken
     * const otpToken = await prisma.otpToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OtpToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenFindFirstArgs} args - Arguments to find a OtpToken
     * @example
     * // Get one OtpToken
     * const otpToken = await prisma.otpToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpTokenFindFirstArgs>(args?: SelectSubset<T, OtpTokenFindFirstArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OtpToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenFindFirstOrThrowArgs} args - Arguments to find a OtpToken
     * @example
     * // Get one OtpToken
     * const otpToken = await prisma.otpToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OtpTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OtpTokens
     * const otpTokens = await prisma.otpToken.findMany()
     * 
     * // Get first 10 OtpTokens
     * const otpTokens = await prisma.otpToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpTokenWithIdOnly = await prisma.otpToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpTokenFindManyArgs>(args?: SelectSubset<T, OtpTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OtpToken.
     * @param {OtpTokenCreateArgs} args - Arguments to create a OtpToken.
     * @example
     * // Create one OtpToken
     * const OtpToken = await prisma.otpToken.create({
     *   data: {
     *     // ... data to create a OtpToken
     *   }
     * })
     * 
     */
    create<T extends OtpTokenCreateArgs>(args: SelectSubset<T, OtpTokenCreateArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OtpTokens.
     * @param {OtpTokenCreateManyArgs} args - Arguments to create many OtpTokens.
     * @example
     * // Create many OtpTokens
     * const otpToken = await prisma.otpToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpTokenCreateManyArgs>(args?: SelectSubset<T, OtpTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OtpTokens and returns the data saved in the database.
     * @param {OtpTokenCreateManyAndReturnArgs} args - Arguments to create many OtpTokens.
     * @example
     * // Create many OtpTokens
     * const otpToken = await prisma.otpToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OtpTokens and only return the `id`
     * const otpTokenWithIdOnly = await prisma.otpToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtpTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, OtpTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OtpToken.
     * @param {OtpTokenDeleteArgs} args - Arguments to delete one OtpToken.
     * @example
     * // Delete one OtpToken
     * const OtpToken = await prisma.otpToken.delete({
     *   where: {
     *     // ... filter to delete one OtpToken
     *   }
     * })
     * 
     */
    delete<T extends OtpTokenDeleteArgs>(args: SelectSubset<T, OtpTokenDeleteArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OtpToken.
     * @param {OtpTokenUpdateArgs} args - Arguments to update one OtpToken.
     * @example
     * // Update one OtpToken
     * const otpToken = await prisma.otpToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpTokenUpdateArgs>(args: SelectSubset<T, OtpTokenUpdateArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OtpTokens.
     * @param {OtpTokenDeleteManyArgs} args - Arguments to filter OtpTokens to delete.
     * @example
     * // Delete a few OtpTokens
     * const { count } = await prisma.otpToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpTokenDeleteManyArgs>(args?: SelectSubset<T, OtpTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtpTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OtpTokens
     * const otpToken = await prisma.otpToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpTokenUpdateManyArgs>(args: SelectSubset<T, OtpTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtpTokens and returns the data updated in the database.
     * @param {OtpTokenUpdateManyAndReturnArgs} args - Arguments to update many OtpTokens.
     * @example
     * // Update many OtpTokens
     * const otpToken = await prisma.otpToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OtpTokens and only return the `id`
     * const otpTokenWithIdOnly = await prisma.otpToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OtpTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, OtpTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OtpToken.
     * @param {OtpTokenUpsertArgs} args - Arguments to update or create a OtpToken.
     * @example
     * // Update or create a OtpToken
     * const otpToken = await prisma.otpToken.upsert({
     *   create: {
     *     // ... data to create a OtpToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OtpToken we want to update
     *   }
     * })
     */
    upsert<T extends OtpTokenUpsertArgs>(args: SelectSubset<T, OtpTokenUpsertArgs<ExtArgs>>): Prisma__OtpTokenClient<$Result.GetResult<Prisma.$OtpTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OtpTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenCountArgs} args - Arguments to filter OtpTokens to count.
     * @example
     * // Count the number of OtpTokens
     * const count = await prisma.otpToken.count({
     *   where: {
     *     // ... the filter for the OtpTokens we want to count
     *   }
     * })
    **/
    count<T extends OtpTokenCountArgs>(
      args?: Subset<T, OtpTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OtpToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpTokenAggregateArgs>(args: Subset<T, OtpTokenAggregateArgs>): Prisma.PrismaPromise<GetOtpTokenAggregateType<T>>

    /**
     * Group by OtpToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpTokenGroupByArgs['orderBy'] }
        : { orderBy?: OtpTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OtpToken model
   */
  readonly fields: OtpTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OtpToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OtpToken model
   */
  interface OtpTokenFieldRefs {
    readonly id: FieldRef<"OtpToken", 'Int'>
    readonly userId: FieldRef<"OtpToken", 'Int'>
    readonly otpCode: FieldRef<"OtpToken", 'String'>
    readonly createdAt: FieldRef<"OtpToken", 'DateTime'>
    readonly expiresAt: FieldRef<"OtpToken", 'DateTime'>
    readonly verifiedAt: FieldRef<"OtpToken", 'DateTime'>
    readonly purpose: FieldRef<"OtpToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OtpToken findUnique
   */
  export type OtpTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * Filter, which OtpToken to fetch.
     */
    where: OtpTokenWhereUniqueInput
  }

  /**
   * OtpToken findUniqueOrThrow
   */
  export type OtpTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * Filter, which OtpToken to fetch.
     */
    where: OtpTokenWhereUniqueInput
  }

  /**
   * OtpToken findFirst
   */
  export type OtpTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * Filter, which OtpToken to fetch.
     */
    where?: OtpTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpTokens to fetch.
     */
    orderBy?: OtpTokenOrderByWithRelationInput | OtpTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpTokens.
     */
    cursor?: OtpTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpTokens.
     */
    distinct?: OtpTokenScalarFieldEnum | OtpTokenScalarFieldEnum[]
  }

  /**
   * OtpToken findFirstOrThrow
   */
  export type OtpTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * Filter, which OtpToken to fetch.
     */
    where?: OtpTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpTokens to fetch.
     */
    orderBy?: OtpTokenOrderByWithRelationInput | OtpTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpTokens.
     */
    cursor?: OtpTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpTokens.
     */
    distinct?: OtpTokenScalarFieldEnum | OtpTokenScalarFieldEnum[]
  }

  /**
   * OtpToken findMany
   */
  export type OtpTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * Filter, which OtpTokens to fetch.
     */
    where?: OtpTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpTokens to fetch.
     */
    orderBy?: OtpTokenOrderByWithRelationInput | OtpTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OtpTokens.
     */
    cursor?: OtpTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpTokens.
     */
    skip?: number
    distinct?: OtpTokenScalarFieldEnum | OtpTokenScalarFieldEnum[]
  }

  /**
   * OtpToken create
   */
  export type OtpTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a OtpToken.
     */
    data: XOR<OtpTokenCreateInput, OtpTokenUncheckedCreateInput>
  }

  /**
   * OtpToken createMany
   */
  export type OtpTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OtpTokens.
     */
    data: OtpTokenCreateManyInput | OtpTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OtpToken createManyAndReturn
   */
  export type OtpTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * The data used to create many OtpTokens.
     */
    data: OtpTokenCreateManyInput | OtpTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OtpToken update
   */
  export type OtpTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a OtpToken.
     */
    data: XOR<OtpTokenUpdateInput, OtpTokenUncheckedUpdateInput>
    /**
     * Choose, which OtpToken to update.
     */
    where: OtpTokenWhereUniqueInput
  }

  /**
   * OtpToken updateMany
   */
  export type OtpTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OtpTokens.
     */
    data: XOR<OtpTokenUpdateManyMutationInput, OtpTokenUncheckedUpdateManyInput>
    /**
     * Filter which OtpTokens to update
     */
    where?: OtpTokenWhereInput
    /**
     * Limit how many OtpTokens to update.
     */
    limit?: number
  }

  /**
   * OtpToken updateManyAndReturn
   */
  export type OtpTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * The data used to update OtpTokens.
     */
    data: XOR<OtpTokenUpdateManyMutationInput, OtpTokenUncheckedUpdateManyInput>
    /**
     * Filter which OtpTokens to update
     */
    where?: OtpTokenWhereInput
    /**
     * Limit how many OtpTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OtpToken upsert
   */
  export type OtpTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the OtpToken to update in case it exists.
     */
    where: OtpTokenWhereUniqueInput
    /**
     * In case the OtpToken found by the `where` argument doesn't exist, create a new OtpToken with this data.
     */
    create: XOR<OtpTokenCreateInput, OtpTokenUncheckedCreateInput>
    /**
     * In case the OtpToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpTokenUpdateInput, OtpTokenUncheckedUpdateInput>
  }

  /**
   * OtpToken delete
   */
  export type OtpTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
    /**
     * Filter which OtpToken to delete.
     */
    where: OtpTokenWhereUniqueInput
  }

  /**
   * OtpToken deleteMany
   */
  export type OtpTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpTokens to delete
     */
    where?: OtpTokenWhereInput
    /**
     * Limit how many OtpTokens to delete.
     */
    limit?: number
  }

  /**
   * OtpToken without action
   */
  export type OtpTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpToken
     */
    select?: OtpTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpToken
     */
    omit?: OtpTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpTokenInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    provider: 'provider',
    avatar: 'avatar',
    isVerified: 'isVerified'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AgreementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    creatorId: 'creatorId',
    fileUrl: 'fileUrl',
    receiverEmail: 'receiverEmail',
    status: 'status',
    signatureCoords: 'signatureCoords',
    createdAt: 'createdAt',
    mimeType: 'mimeType',
    fileSize: 'fileSize',
    originalFilename: 'originalFilename'
  };

  export type AgreementScalarFieldEnum = (typeof AgreementScalarFieldEnum)[keyof typeof AgreementScalarFieldEnum]


  export const AgreementTrailScalarFieldEnum: {
    id: 'id',
    agreementId: 'agreementId',
    actorId: 'actorId',
    actorRole: 'actorRole',
    actorAction: 'actorAction',
    createdAt: 'createdAt',
    ipAddress: 'ipAddress',
    previousLogHash: 'previousLogHash',
    logHash: 'logHash'
  };

  export type AgreementTrailScalarFieldEnum = (typeof AgreementTrailScalarFieldEnum)[keyof typeof AgreementTrailScalarFieldEnum]


  export const AgreementSignerScalarFieldEnum: {
    id: 'id',
    agreementId: 'agreementId',
    signerEmail: 'signerEmail',
    signerName: 'signerName',
    status: 'status',
    signedAt: 'signedAt',
    signatureCoords: 'signatureCoords'
  };

  export type AgreementSignerScalarFieldEnum = (typeof AgreementSignerScalarFieldEnum)[keyof typeof AgreementSignerScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fileUrl: 'fileUrl',
    creatorId: 'creatorId',
    createdAt: 'createdAt',
    mimeType: 'mimeType',
    fileSize: 'fileSize',
    originalFilename: 'originalFilename'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    creatorId: 'creatorId',
    createdAt: 'createdAt'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const SigningTokenScalarFieldEnum: {
    id: 'id',
    agreementId: 'agreementId',
    signerEmail: 'signerEmail',
    token: 'token',
    expiresAt: 'expiresAt',
    usedAt: 'usedAt'
  };

  export type SigningTokenScalarFieldEnum = (typeof SigningTokenScalarFieldEnum)[keyof typeof SigningTokenScalarFieldEnum]


  export const OtpTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    otpCode: 'otpCode',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    verifiedAt: 'verifiedAt',
    purpose: 'purpose'
  };

  export type OtpTokenScalarFieldEnum = (typeof OtpTokenScalarFieldEnum)[keyof typeof OtpTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AgreementStatus'
   */
  export type EnumAgreementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AgreementStatus'>
    


  /**
   * Reference to a field of type 'AgreementStatus[]'
   */
  export type ListEnumAgreementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AgreementStatus[]'>
    


  /**
   * Reference to a field of type 'ActorRole'
   */
  export type EnumActorRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActorRole'>
    


  /**
   * Reference to a field of type 'ActorRole[]'
   */
  export type ListEnumActorRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActorRole[]'>
    


  /**
   * Reference to a field of type 'ActorAction'
   */
  export type EnumActorActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActorAction'>
    


  /**
   * Reference to a field of type 'ActorAction[]'
   */
  export type ListEnumActorActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActorAction[]'>
    


  /**
   * Reference to a field of type 'SignerStatus'
   */
  export type EnumSignerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignerStatus'>
    


  /**
   * Reference to a field of type 'SignerStatus[]'
   */
  export type ListEnumSignerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignerStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    provider?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    agreements?: AgreementListRelationFilter
    documents?: DocumentListRelationFilter
    contacts?: ContactListRelationFilter
    trails?: AgreementTrailListRelationFilter
    otpTokens?: OtpTokenListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    provider?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    agreements?: AgreementOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
    trails?: AgreementTrailOrderByRelationAggregateInput
    otpTokens?: OtpTokenOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    provider?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    agreements?: AgreementListRelationFilter
    documents?: DocumentListRelationFilter
    contacts?: ContactListRelationFilter
    trails?: AgreementTrailListRelationFilter
    otpTokens?: OtpTokenListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    provider?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    provider?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type AgreementWhereInput = {
    AND?: AgreementWhereInput | AgreementWhereInput[]
    OR?: AgreementWhereInput[]
    NOT?: AgreementWhereInput | AgreementWhereInput[]
    id?: IntFilter<"Agreement"> | number
    name?: StringFilter<"Agreement"> | string
    creatorId?: IntFilter<"Agreement"> | number
    fileUrl?: StringFilter<"Agreement"> | string
    receiverEmail?: StringFilter<"Agreement"> | string
    status?: EnumAgreementStatusFilter<"Agreement"> | $Enums.AgreementStatus
    signatureCoords?: StringNullableFilter<"Agreement"> | string | null
    createdAt?: DateTimeFilter<"Agreement"> | Date | string
    mimeType?: StringNullableFilter<"Agreement"> | string | null
    fileSize?: IntNullableFilter<"Agreement"> | number | null
    originalFilename?: StringNullableFilter<"Agreement"> | string | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    trails?: AgreementTrailListRelationFilter
    signers?: AgreementSignerListRelationFilter
    signingTokens?: SigningTokenListRelationFilter
  }

  export type AgreementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    fileUrl?: SortOrder
    receiverEmail?: SortOrder
    status?: SortOrder
    signatureCoords?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    originalFilename?: SortOrderInput | SortOrder
    creator?: UserOrderByWithRelationInput
    trails?: AgreementTrailOrderByRelationAggregateInput
    signers?: AgreementSignerOrderByRelationAggregateInput
    signingTokens?: SigningTokenOrderByRelationAggregateInput
  }

  export type AgreementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: AgreementWhereInput | AgreementWhereInput[]
    OR?: AgreementWhereInput[]
    NOT?: AgreementWhereInput | AgreementWhereInput[]
    creatorId?: IntFilter<"Agreement"> | number
    fileUrl?: StringFilter<"Agreement"> | string
    receiverEmail?: StringFilter<"Agreement"> | string
    status?: EnumAgreementStatusFilter<"Agreement"> | $Enums.AgreementStatus
    signatureCoords?: StringNullableFilter<"Agreement"> | string | null
    createdAt?: DateTimeFilter<"Agreement"> | Date | string
    mimeType?: StringNullableFilter<"Agreement"> | string | null
    fileSize?: IntNullableFilter<"Agreement"> | number | null
    originalFilename?: StringNullableFilter<"Agreement"> | string | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    trails?: AgreementTrailListRelationFilter
    signers?: AgreementSignerListRelationFilter
    signingTokens?: SigningTokenListRelationFilter
  }, "id" | "name">

  export type AgreementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    fileUrl?: SortOrder
    receiverEmail?: SortOrder
    status?: SortOrder
    signatureCoords?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    originalFilename?: SortOrderInput | SortOrder
    _count?: AgreementCountOrderByAggregateInput
    _avg?: AgreementAvgOrderByAggregateInput
    _max?: AgreementMaxOrderByAggregateInput
    _min?: AgreementMinOrderByAggregateInput
    _sum?: AgreementSumOrderByAggregateInput
  }

  export type AgreementScalarWhereWithAggregatesInput = {
    AND?: AgreementScalarWhereWithAggregatesInput | AgreementScalarWhereWithAggregatesInput[]
    OR?: AgreementScalarWhereWithAggregatesInput[]
    NOT?: AgreementScalarWhereWithAggregatesInput | AgreementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Agreement"> | number
    name?: StringWithAggregatesFilter<"Agreement"> | string
    creatorId?: IntWithAggregatesFilter<"Agreement"> | number
    fileUrl?: StringWithAggregatesFilter<"Agreement"> | string
    receiverEmail?: StringWithAggregatesFilter<"Agreement"> | string
    status?: EnumAgreementStatusWithAggregatesFilter<"Agreement"> | $Enums.AgreementStatus
    signatureCoords?: StringNullableWithAggregatesFilter<"Agreement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Agreement"> | Date | string
    mimeType?: StringNullableWithAggregatesFilter<"Agreement"> | string | null
    fileSize?: IntNullableWithAggregatesFilter<"Agreement"> | number | null
    originalFilename?: StringNullableWithAggregatesFilter<"Agreement"> | string | null
  }

  export type AgreementTrailWhereInput = {
    AND?: AgreementTrailWhereInput | AgreementTrailWhereInput[]
    OR?: AgreementTrailWhereInput[]
    NOT?: AgreementTrailWhereInput | AgreementTrailWhereInput[]
    id?: IntFilter<"AgreementTrail"> | number
    agreementId?: IntFilter<"AgreementTrail"> | number
    actorId?: IntNullableFilter<"AgreementTrail"> | number | null
    actorRole?: EnumActorRoleFilter<"AgreementTrail"> | $Enums.ActorRole
    actorAction?: EnumActorActionFilter<"AgreementTrail"> | $Enums.ActorAction
    createdAt?: DateTimeFilter<"AgreementTrail"> | Date | string
    ipAddress?: StringNullableFilter<"AgreementTrail"> | string | null
    previousLogHash?: StringNullableFilter<"AgreementTrail"> | string | null
    logHash?: StringNullableFilter<"AgreementTrail"> | string | null
    agreement?: XOR<AgreementScalarRelationFilter, AgreementWhereInput>
    actor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AgreementTrailOrderByWithRelationInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrderInput | SortOrder
    actorRole?: SortOrder
    actorAction?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    previousLogHash?: SortOrderInput | SortOrder
    logHash?: SortOrderInput | SortOrder
    agreement?: AgreementOrderByWithRelationInput
    actor?: UserOrderByWithRelationInput
  }

  export type AgreementTrailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgreementTrailWhereInput | AgreementTrailWhereInput[]
    OR?: AgreementTrailWhereInput[]
    NOT?: AgreementTrailWhereInput | AgreementTrailWhereInput[]
    agreementId?: IntFilter<"AgreementTrail"> | number
    actorId?: IntNullableFilter<"AgreementTrail"> | number | null
    actorRole?: EnumActorRoleFilter<"AgreementTrail"> | $Enums.ActorRole
    actorAction?: EnumActorActionFilter<"AgreementTrail"> | $Enums.ActorAction
    createdAt?: DateTimeFilter<"AgreementTrail"> | Date | string
    ipAddress?: StringNullableFilter<"AgreementTrail"> | string | null
    previousLogHash?: StringNullableFilter<"AgreementTrail"> | string | null
    logHash?: StringNullableFilter<"AgreementTrail"> | string | null
    agreement?: XOR<AgreementScalarRelationFilter, AgreementWhereInput>
    actor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AgreementTrailOrderByWithAggregationInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrderInput | SortOrder
    actorRole?: SortOrder
    actorAction?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    previousLogHash?: SortOrderInput | SortOrder
    logHash?: SortOrderInput | SortOrder
    _count?: AgreementTrailCountOrderByAggregateInput
    _avg?: AgreementTrailAvgOrderByAggregateInput
    _max?: AgreementTrailMaxOrderByAggregateInput
    _min?: AgreementTrailMinOrderByAggregateInput
    _sum?: AgreementTrailSumOrderByAggregateInput
  }

  export type AgreementTrailScalarWhereWithAggregatesInput = {
    AND?: AgreementTrailScalarWhereWithAggregatesInput | AgreementTrailScalarWhereWithAggregatesInput[]
    OR?: AgreementTrailScalarWhereWithAggregatesInput[]
    NOT?: AgreementTrailScalarWhereWithAggregatesInput | AgreementTrailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgreementTrail"> | number
    agreementId?: IntWithAggregatesFilter<"AgreementTrail"> | number
    actorId?: IntNullableWithAggregatesFilter<"AgreementTrail"> | number | null
    actorRole?: EnumActorRoleWithAggregatesFilter<"AgreementTrail"> | $Enums.ActorRole
    actorAction?: EnumActorActionWithAggregatesFilter<"AgreementTrail"> | $Enums.ActorAction
    createdAt?: DateTimeWithAggregatesFilter<"AgreementTrail"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"AgreementTrail"> | string | null
    previousLogHash?: StringNullableWithAggregatesFilter<"AgreementTrail"> | string | null
    logHash?: StringNullableWithAggregatesFilter<"AgreementTrail"> | string | null
  }

  export type AgreementSignerWhereInput = {
    AND?: AgreementSignerWhereInput | AgreementSignerWhereInput[]
    OR?: AgreementSignerWhereInput[]
    NOT?: AgreementSignerWhereInput | AgreementSignerWhereInput[]
    id?: IntFilter<"AgreementSigner"> | number
    agreementId?: IntFilter<"AgreementSigner"> | number
    signerEmail?: StringFilter<"AgreementSigner"> | string
    signerName?: StringNullableFilter<"AgreementSigner"> | string | null
    status?: EnumSignerStatusFilter<"AgreementSigner"> | $Enums.SignerStatus
    signedAt?: DateTimeNullableFilter<"AgreementSigner"> | Date | string | null
    signatureCoords?: StringNullableFilter<"AgreementSigner"> | string | null
    agreement?: XOR<AgreementScalarRelationFilter, AgreementWhereInput>
  }

  export type AgreementSignerOrderByWithRelationInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    signerName?: SortOrderInput | SortOrder
    status?: SortOrder
    signedAt?: SortOrderInput | SortOrder
    signatureCoords?: SortOrderInput | SortOrder
    agreement?: AgreementOrderByWithRelationInput
  }

  export type AgreementSignerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgreementSignerWhereInput | AgreementSignerWhereInput[]
    OR?: AgreementSignerWhereInput[]
    NOT?: AgreementSignerWhereInput | AgreementSignerWhereInput[]
    agreementId?: IntFilter<"AgreementSigner"> | number
    signerEmail?: StringFilter<"AgreementSigner"> | string
    signerName?: StringNullableFilter<"AgreementSigner"> | string | null
    status?: EnumSignerStatusFilter<"AgreementSigner"> | $Enums.SignerStatus
    signedAt?: DateTimeNullableFilter<"AgreementSigner"> | Date | string | null
    signatureCoords?: StringNullableFilter<"AgreementSigner"> | string | null
    agreement?: XOR<AgreementScalarRelationFilter, AgreementWhereInput>
  }, "id">

  export type AgreementSignerOrderByWithAggregationInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    signerName?: SortOrderInput | SortOrder
    status?: SortOrder
    signedAt?: SortOrderInput | SortOrder
    signatureCoords?: SortOrderInput | SortOrder
    _count?: AgreementSignerCountOrderByAggregateInput
    _avg?: AgreementSignerAvgOrderByAggregateInput
    _max?: AgreementSignerMaxOrderByAggregateInput
    _min?: AgreementSignerMinOrderByAggregateInput
    _sum?: AgreementSignerSumOrderByAggregateInput
  }

  export type AgreementSignerScalarWhereWithAggregatesInput = {
    AND?: AgreementSignerScalarWhereWithAggregatesInput | AgreementSignerScalarWhereWithAggregatesInput[]
    OR?: AgreementSignerScalarWhereWithAggregatesInput[]
    NOT?: AgreementSignerScalarWhereWithAggregatesInput | AgreementSignerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgreementSigner"> | number
    agreementId?: IntWithAggregatesFilter<"AgreementSigner"> | number
    signerEmail?: StringWithAggregatesFilter<"AgreementSigner"> | string
    signerName?: StringNullableWithAggregatesFilter<"AgreementSigner"> | string | null
    status?: EnumSignerStatusWithAggregatesFilter<"AgreementSigner"> | $Enums.SignerStatus
    signedAt?: DateTimeNullableWithAggregatesFilter<"AgreementSigner"> | Date | string | null
    signatureCoords?: StringNullableWithAggregatesFilter<"AgreementSigner"> | string | null
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: IntFilter<"Document"> | number
    name?: StringFilter<"Document"> | string
    fileUrl?: StringNullableFilter<"Document"> | string | null
    creatorId?: IntFilter<"Document"> | number
    createdAt?: DateTimeFilter<"Document"> | Date | string
    mimeType?: StringNullableFilter<"Document"> | string | null
    fileSize?: IntNullableFilter<"Document"> | number | null
    originalFilename?: StringNullableFilter<"Document"> | string | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    originalFilename?: SortOrderInput | SortOrder
    creator?: UserOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    name?: StringFilter<"Document"> | string
    fileUrl?: StringNullableFilter<"Document"> | string | null
    creatorId?: IntFilter<"Document"> | number
    createdAt?: DateTimeFilter<"Document"> | Date | string
    mimeType?: StringNullableFilter<"Document"> | string | null
    fileSize?: IntNullableFilter<"Document"> | number | null
    originalFilename?: StringNullableFilter<"Document"> | string | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    originalFilename?: SortOrderInput | SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Document"> | number
    name?: StringWithAggregatesFilter<"Document"> | string
    fileUrl?: StringNullableWithAggregatesFilter<"Document"> | string | null
    creatorId?: IntWithAggregatesFilter<"Document"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    mimeType?: StringNullableWithAggregatesFilter<"Document"> | string | null
    fileSize?: IntNullableWithAggregatesFilter<"Document"> | number | null
    originalFilename?: StringNullableWithAggregatesFilter<"Document"> | string | null
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: IntFilter<"Contact"> | number
    email?: StringFilter<"Contact"> | string
    name?: StringFilter<"Contact"> | string
    creatorId?: IntFilter<"Contact"> | number
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    creator?: UserOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    name?: StringFilter<"Contact"> | string
    creatorId?: IntFilter<"Contact"> | number
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "email">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contact"> | number
    email?: StringWithAggregatesFilter<"Contact"> | string
    name?: StringWithAggregatesFilter<"Contact"> | string
    creatorId?: IntWithAggregatesFilter<"Contact"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
  }

  export type SigningTokenWhereInput = {
    AND?: SigningTokenWhereInput | SigningTokenWhereInput[]
    OR?: SigningTokenWhereInput[]
    NOT?: SigningTokenWhereInput | SigningTokenWhereInput[]
    id?: IntFilter<"SigningToken"> | number
    agreementId?: IntFilter<"SigningToken"> | number
    signerEmail?: StringFilter<"SigningToken"> | string
    token?: StringFilter<"SigningToken"> | string
    expiresAt?: DateTimeNullableFilter<"SigningToken"> | Date | string | null
    usedAt?: DateTimeNullableFilter<"SigningToken"> | Date | string | null
    agreement?: XOR<AgreementScalarRelationFilter, AgreementWhereInput>
  }

  export type SigningTokenOrderByWithRelationInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    usedAt?: SortOrderInput | SortOrder
    agreement?: AgreementOrderByWithRelationInput
  }

  export type SigningTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: SigningTokenWhereInput | SigningTokenWhereInput[]
    OR?: SigningTokenWhereInput[]
    NOT?: SigningTokenWhereInput | SigningTokenWhereInput[]
    agreementId?: IntFilter<"SigningToken"> | number
    signerEmail?: StringFilter<"SigningToken"> | string
    expiresAt?: DateTimeNullableFilter<"SigningToken"> | Date | string | null
    usedAt?: DateTimeNullableFilter<"SigningToken"> | Date | string | null
    agreement?: XOR<AgreementScalarRelationFilter, AgreementWhereInput>
  }, "id" | "token">

  export type SigningTokenOrderByWithAggregationInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    usedAt?: SortOrderInput | SortOrder
    _count?: SigningTokenCountOrderByAggregateInput
    _avg?: SigningTokenAvgOrderByAggregateInput
    _max?: SigningTokenMaxOrderByAggregateInput
    _min?: SigningTokenMinOrderByAggregateInput
    _sum?: SigningTokenSumOrderByAggregateInput
  }

  export type SigningTokenScalarWhereWithAggregatesInput = {
    AND?: SigningTokenScalarWhereWithAggregatesInput | SigningTokenScalarWhereWithAggregatesInput[]
    OR?: SigningTokenScalarWhereWithAggregatesInput[]
    NOT?: SigningTokenScalarWhereWithAggregatesInput | SigningTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SigningToken"> | number
    agreementId?: IntWithAggregatesFilter<"SigningToken"> | number
    signerEmail?: StringWithAggregatesFilter<"SigningToken"> | string
    token?: StringWithAggregatesFilter<"SigningToken"> | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"SigningToken"> | Date | string | null
    usedAt?: DateTimeNullableWithAggregatesFilter<"SigningToken"> | Date | string | null
  }

  export type OtpTokenWhereInput = {
    AND?: OtpTokenWhereInput | OtpTokenWhereInput[]
    OR?: OtpTokenWhereInput[]
    NOT?: OtpTokenWhereInput | OtpTokenWhereInput[]
    id?: IntFilter<"OtpToken"> | number
    userId?: IntFilter<"OtpToken"> | number
    otpCode?: StringFilter<"OtpToken"> | string
    createdAt?: DateTimeFilter<"OtpToken"> | Date | string
    expiresAt?: DateTimeFilter<"OtpToken"> | Date | string
    verifiedAt?: DateTimeNullableFilter<"OtpToken"> | Date | string | null
    purpose?: StringFilter<"OtpToken"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OtpTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    otpCode?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    purpose?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OtpTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_purpose?: OtpTokenUserIdPurposeCompoundUniqueInput
    AND?: OtpTokenWhereInput | OtpTokenWhereInput[]
    OR?: OtpTokenWhereInput[]
    NOT?: OtpTokenWhereInput | OtpTokenWhereInput[]
    userId?: IntFilter<"OtpToken"> | number
    otpCode?: StringFilter<"OtpToken"> | string
    createdAt?: DateTimeFilter<"OtpToken"> | Date | string
    expiresAt?: DateTimeFilter<"OtpToken"> | Date | string
    verifiedAt?: DateTimeNullableFilter<"OtpToken"> | Date | string | null
    purpose?: StringFilter<"OtpToken"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_purpose">

  export type OtpTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    otpCode?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    purpose?: SortOrder
    _count?: OtpTokenCountOrderByAggregateInput
    _avg?: OtpTokenAvgOrderByAggregateInput
    _max?: OtpTokenMaxOrderByAggregateInput
    _min?: OtpTokenMinOrderByAggregateInput
    _sum?: OtpTokenSumOrderByAggregateInput
  }

  export type OtpTokenScalarWhereWithAggregatesInput = {
    AND?: OtpTokenScalarWhereWithAggregatesInput | OtpTokenScalarWhereWithAggregatesInput[]
    OR?: OtpTokenScalarWhereWithAggregatesInput[]
    NOT?: OtpTokenScalarWhereWithAggregatesInput | OtpTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OtpToken"> | number
    userId?: IntWithAggregatesFilter<"OtpToken"> | number
    otpCode?: StringWithAggregatesFilter<"OtpToken"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OtpToken"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"OtpToken"> | Date | string
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"OtpToken"> | Date | string | null
    purpose?: StringWithAggregatesFilter<"OtpToken"> | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementCreateNestedManyWithoutCreatorInput
    documents?: DocumentCreateNestedManyWithoutCreatorInput
    contacts?: ContactCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementUncheckedCreateNestedManyWithoutCreatorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatorInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUncheckedUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUncheckedUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgreementCreateInput = {
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    creator: UserCreateNestedOneWithoutAgreementsInput
    trails?: AgreementTrailCreateNestedManyWithoutAgreementInput
    signers?: AgreementSignerCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenCreateNestedManyWithoutAgreementInput
  }

  export type AgreementUncheckedCreateInput = {
    id?: number
    name: string
    creatorId: number
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutAgreementInput
    signers?: AgreementSignerUncheckedCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenUncheckedCreateNestedManyWithoutAgreementInput
  }

  export type AgreementUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutAgreementsNestedInput
    trails?: AgreementTrailUpdateManyWithoutAgreementNestedInput
    signers?: AgreementSignerUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    trails?: AgreementTrailUncheckedUpdateManyWithoutAgreementNestedInput
    signers?: AgreementSignerUncheckedUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUncheckedUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementCreateManyInput = {
    id?: number
    name: string
    creatorId: number
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type AgreementUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementTrailCreateInput = {
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
    agreement: AgreementCreateNestedOneWithoutTrailsInput
    actor?: UserCreateNestedOneWithoutTrailsInput
  }

  export type AgreementTrailUncheckedCreateInput = {
    id?: number
    agreementId: number
    actorId?: number | null
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
  }

  export type AgreementTrailUpdateInput = {
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
    agreement?: AgreementUpdateOneRequiredWithoutTrailsNestedInput
    actor?: UserUpdateOneWithoutTrailsNestedInput
  }

  export type AgreementTrailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    actorId?: NullableIntFieldUpdateOperationsInput | number | null
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementTrailCreateManyInput = {
    id?: number
    agreementId: number
    actorId?: number | null
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
  }

  export type AgreementTrailUpdateManyMutationInput = {
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementTrailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    actorId?: NullableIntFieldUpdateOperationsInput | number | null
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementSignerCreateInput = {
    signerEmail: string
    signerName?: string | null
    status: $Enums.SignerStatus
    signedAt?: Date | string | null
    signatureCoords?: string | null
    agreement: AgreementCreateNestedOneWithoutSignersInput
  }

  export type AgreementSignerUncheckedCreateInput = {
    id?: number
    agreementId: number
    signerEmail: string
    signerName?: string | null
    status: $Enums.SignerStatus
    signedAt?: Date | string | null
    signatureCoords?: string | null
  }

  export type AgreementSignerUpdateInput = {
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    agreement?: AgreementUpdateOneRequiredWithoutSignersNestedInput
  }

  export type AgreementSignerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementSignerCreateManyInput = {
    id?: number
    agreementId: number
    signerEmail: string
    signerName?: string | null
    status: $Enums.SignerStatus
    signedAt?: Date | string | null
    signatureCoords?: string | null
  }

  export type AgreementSignerUpdateManyMutationInput = {
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementSignerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateInput = {
    name: string
    fileUrl?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    creator: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: number
    name: string
    fileUrl?: string | null
    creatorId: number
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type DocumentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyInput = {
    id?: number
    name: string
    fileUrl?: string | null
    creatorId: number
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type DocumentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateInput = {
    email: string
    name: string
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    creatorId: number
    createdAt?: Date | string
  }

  export type ContactUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateManyInput = {
    id?: number
    email: string
    name: string
    creatorId: number
    createdAt?: Date | string
  }

  export type ContactUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SigningTokenCreateInput = {
    signerEmail: string
    token: string
    expiresAt?: Date | string | null
    usedAt?: Date | string | null
    agreement: AgreementCreateNestedOneWithoutSigningTokensInput
  }

  export type SigningTokenUncheckedCreateInput = {
    id?: number
    agreementId: number
    signerEmail: string
    token: string
    expiresAt?: Date | string | null
    usedAt?: Date | string | null
  }

  export type SigningTokenUpdateInput = {
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agreement?: AgreementUpdateOneRequiredWithoutSigningTokensNestedInput
  }

  export type SigningTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SigningTokenCreateManyInput = {
    id?: number
    agreementId: number
    signerEmail: string
    token: string
    expiresAt?: Date | string | null
    usedAt?: Date | string | null
  }

  export type SigningTokenUpdateManyMutationInput = {
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SigningTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OtpTokenCreateInput = {
    otpCode: string
    createdAt?: Date | string
    expiresAt: Date | string
    verifiedAt?: Date | string | null
    purpose: string
    user: UserCreateNestedOneWithoutOtpTokensInput
  }

  export type OtpTokenUncheckedCreateInput = {
    id?: number
    userId: number
    otpCode: string
    createdAt?: Date | string
    expiresAt: Date | string
    verifiedAt?: Date | string | null
    purpose: string
  }

  export type OtpTokenUpdateInput = {
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOtpTokensNestedInput
  }

  export type OtpTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
  }

  export type OtpTokenCreateManyInput = {
    id?: number
    userId: number
    otpCode: string
    createdAt?: Date | string
    expiresAt: Date | string
    verifiedAt?: Date | string | null
    purpose: string
  }

  export type OtpTokenUpdateManyMutationInput = {
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
  }

  export type OtpTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AgreementListRelationFilter = {
    every?: AgreementWhereInput
    some?: AgreementWhereInput
    none?: AgreementWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type AgreementTrailListRelationFilter = {
    every?: AgreementTrailWhereInput
    some?: AgreementTrailWhereInput
    none?: AgreementTrailWhereInput
  }

  export type OtpTokenListRelationFilter = {
    every?: OtpTokenWhereInput
    some?: OtpTokenWhereInput
    none?: OtpTokenWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AgreementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgreementTrailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OtpTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    provider?: SortOrder
    avatar?: SortOrder
    isVerified?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    provider?: SortOrder
    avatar?: SortOrder
    isVerified?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    provider?: SortOrder
    avatar?: SortOrder
    isVerified?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAgreementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusFilter<$PrismaModel> | $Enums.AgreementStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AgreementSignerListRelationFilter = {
    every?: AgreementSignerWhereInput
    some?: AgreementSignerWhereInput
    none?: AgreementSignerWhereInput
  }

  export type SigningTokenListRelationFilter = {
    every?: SigningTokenWhereInput
    some?: SigningTokenWhereInput
    none?: SigningTokenWhereInput
  }

  export type AgreementSignerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SigningTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgreementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    fileUrl?: SortOrder
    receiverEmail?: SortOrder
    status?: SortOrder
    signatureCoords?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    originalFilename?: SortOrder
  }

  export type AgreementAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    fileSize?: SortOrder
  }

  export type AgreementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    fileUrl?: SortOrder
    receiverEmail?: SortOrder
    status?: SortOrder
    signatureCoords?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    originalFilename?: SortOrder
  }

  export type AgreementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    fileUrl?: SortOrder
    receiverEmail?: SortOrder
    status?: SortOrder
    signatureCoords?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    originalFilename?: SortOrder
  }

  export type AgreementSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    fileSize?: SortOrder
  }

  export type EnumAgreementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusWithAggregatesFilter<$PrismaModel> | $Enums.AgreementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAgreementStatusFilter<$PrismaModel>
    _max?: NestedEnumAgreementStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumActorRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorRole | EnumActorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumActorRoleFilter<$PrismaModel> | $Enums.ActorRole
  }

  export type EnumActorActionFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorAction | EnumActorActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActorActionFilter<$PrismaModel> | $Enums.ActorAction
  }

  export type AgreementScalarRelationFilter = {
    is?: AgreementWhereInput
    isNot?: AgreementWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AgreementTrailCountOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrder
    actorRole?: SortOrder
    actorAction?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    previousLogHash?: SortOrder
    logHash?: SortOrder
  }

  export type AgreementTrailAvgOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrder
  }

  export type AgreementTrailMaxOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrder
    actorRole?: SortOrder
    actorAction?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    previousLogHash?: SortOrder
    logHash?: SortOrder
  }

  export type AgreementTrailMinOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrder
    actorRole?: SortOrder
    actorAction?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    previousLogHash?: SortOrder
    logHash?: SortOrder
  }

  export type AgreementTrailSumOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    actorId?: SortOrder
  }

  export type EnumActorRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorRole | EnumActorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumActorRoleWithAggregatesFilter<$PrismaModel> | $Enums.ActorRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActorRoleFilter<$PrismaModel>
    _max?: NestedEnumActorRoleFilter<$PrismaModel>
  }

  export type EnumActorActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorAction | EnumActorActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActorActionWithAggregatesFilter<$PrismaModel> | $Enums.ActorAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActorActionFilter<$PrismaModel>
    _max?: NestedEnumActorActionFilter<$PrismaModel>
  }

  export type EnumSignerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SignerStatus | EnumSignerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSignerStatusFilter<$PrismaModel> | $Enums.SignerStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AgreementSignerCountOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    signerName?: SortOrder
    status?: SortOrder
    signedAt?: SortOrder
    signatureCoords?: SortOrder
  }

  export type AgreementSignerAvgOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
  }

  export type AgreementSignerMaxOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    signerName?: SortOrder
    status?: SortOrder
    signedAt?: SortOrder
    signatureCoords?: SortOrder
  }

  export type AgreementSignerMinOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    signerName?: SortOrder
    status?: SortOrder
    signedAt?: SortOrder
    signatureCoords?: SortOrder
  }

  export type AgreementSignerSumOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
  }

  export type EnumSignerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignerStatus | EnumSignerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSignerStatusWithAggregatesFilter<$PrismaModel> | $Enums.SignerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignerStatusFilter<$PrismaModel>
    _max?: NestedEnumSignerStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    originalFilename?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    fileSize?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    originalFilename?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fileUrl?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    originalFilename?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    fileSize?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    creatorId?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
  }

  export type SigningTokenCountOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
  }

  export type SigningTokenAvgOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
  }

  export type SigningTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
  }

  export type SigningTokenMinOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
    signerEmail?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
  }

  export type SigningTokenSumOrderByAggregateInput = {
    id?: SortOrder
    agreementId?: SortOrder
  }

  export type OtpTokenUserIdPurposeCompoundUniqueInput = {
    userId: number
    purpose: string
  }

  export type OtpTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otpCode?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    verifiedAt?: SortOrder
    purpose?: SortOrder
  }

  export type OtpTokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OtpTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otpCode?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    verifiedAt?: SortOrder
    purpose?: SortOrder
  }

  export type OtpTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otpCode?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    verifiedAt?: SortOrder
    purpose?: SortOrder
  }

  export type OtpTokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AgreementCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AgreementCreateWithoutCreatorInput, AgreementUncheckedCreateWithoutCreatorInput> | AgreementCreateWithoutCreatorInput[] | AgreementUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutCreatorInput | AgreementCreateOrConnectWithoutCreatorInput[]
    createMany?: AgreementCreateManyCreatorInputEnvelope
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<DocumentCreateWithoutCreatorInput, DocumentUncheckedCreateWithoutCreatorInput> | DocumentCreateWithoutCreatorInput[] | DocumentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatorInput | DocumentCreateOrConnectWithoutCreatorInput[]
    createMany?: DocumentCreateManyCreatorInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ContactCreateWithoutCreatorInput, ContactUncheckedCreateWithoutCreatorInput> | ContactCreateWithoutCreatorInput[] | ContactUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatorInput | ContactCreateOrConnectWithoutCreatorInput[]
    createMany?: ContactCreateManyCreatorInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type AgreementTrailCreateNestedManyWithoutActorInput = {
    create?: XOR<AgreementTrailCreateWithoutActorInput, AgreementTrailUncheckedCreateWithoutActorInput> | AgreementTrailCreateWithoutActorInput[] | AgreementTrailUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutActorInput | AgreementTrailCreateOrConnectWithoutActorInput[]
    createMany?: AgreementTrailCreateManyActorInputEnvelope
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
  }

  export type OtpTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpTokenCreateWithoutUserInput, OtpTokenUncheckedCreateWithoutUserInput> | OtpTokenCreateWithoutUserInput[] | OtpTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpTokenCreateOrConnectWithoutUserInput | OtpTokenCreateOrConnectWithoutUserInput[]
    createMany?: OtpTokenCreateManyUserInputEnvelope
    connect?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
  }

  export type AgreementUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AgreementCreateWithoutCreatorInput, AgreementUncheckedCreateWithoutCreatorInput> | AgreementCreateWithoutCreatorInput[] | AgreementUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutCreatorInput | AgreementCreateOrConnectWithoutCreatorInput[]
    createMany?: AgreementCreateManyCreatorInputEnvelope
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<DocumentCreateWithoutCreatorInput, DocumentUncheckedCreateWithoutCreatorInput> | DocumentCreateWithoutCreatorInput[] | DocumentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatorInput | DocumentCreateOrConnectWithoutCreatorInput[]
    createMany?: DocumentCreateManyCreatorInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ContactCreateWithoutCreatorInput, ContactUncheckedCreateWithoutCreatorInput> | ContactCreateWithoutCreatorInput[] | ContactUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatorInput | ContactCreateOrConnectWithoutCreatorInput[]
    createMany?: ContactCreateManyCreatorInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type AgreementTrailUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<AgreementTrailCreateWithoutActorInput, AgreementTrailUncheckedCreateWithoutActorInput> | AgreementTrailCreateWithoutActorInput[] | AgreementTrailUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutActorInput | AgreementTrailCreateOrConnectWithoutActorInput[]
    createMany?: AgreementTrailCreateManyActorInputEnvelope
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
  }

  export type OtpTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpTokenCreateWithoutUserInput, OtpTokenUncheckedCreateWithoutUserInput> | OtpTokenCreateWithoutUserInput[] | OtpTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpTokenCreateOrConnectWithoutUserInput | OtpTokenCreateOrConnectWithoutUserInput[]
    createMany?: OtpTokenCreateManyUserInputEnvelope
    connect?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AgreementUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AgreementCreateWithoutCreatorInput, AgreementUncheckedCreateWithoutCreatorInput> | AgreementCreateWithoutCreatorInput[] | AgreementUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutCreatorInput | AgreementCreateOrConnectWithoutCreatorInput[]
    upsert?: AgreementUpsertWithWhereUniqueWithoutCreatorInput | AgreementUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AgreementCreateManyCreatorInputEnvelope
    set?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    disconnect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    delete?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    update?: AgreementUpdateWithWhereUniqueWithoutCreatorInput | AgreementUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AgreementUpdateManyWithWhereWithoutCreatorInput | AgreementUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatorInput, DocumentUncheckedCreateWithoutCreatorInput> | DocumentCreateWithoutCreatorInput[] | DocumentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatorInput | DocumentCreateOrConnectWithoutCreatorInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatorInput | DocumentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: DocumentCreateManyCreatorInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatorInput | DocumentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatorInput | DocumentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ContactCreateWithoutCreatorInput, ContactUncheckedCreateWithoutCreatorInput> | ContactCreateWithoutCreatorInput[] | ContactUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatorInput | ContactCreateOrConnectWithoutCreatorInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutCreatorInput | ContactUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ContactCreateManyCreatorInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutCreatorInput | ContactUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutCreatorInput | ContactUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AgreementTrailUpdateManyWithoutActorNestedInput = {
    create?: XOR<AgreementTrailCreateWithoutActorInput, AgreementTrailUncheckedCreateWithoutActorInput> | AgreementTrailCreateWithoutActorInput[] | AgreementTrailUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutActorInput | AgreementTrailCreateOrConnectWithoutActorInput[]
    upsert?: AgreementTrailUpsertWithWhereUniqueWithoutActorInput | AgreementTrailUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AgreementTrailCreateManyActorInputEnvelope
    set?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    disconnect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    delete?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    update?: AgreementTrailUpdateWithWhereUniqueWithoutActorInput | AgreementTrailUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AgreementTrailUpdateManyWithWhereWithoutActorInput | AgreementTrailUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AgreementTrailScalarWhereInput | AgreementTrailScalarWhereInput[]
  }

  export type OtpTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpTokenCreateWithoutUserInput, OtpTokenUncheckedCreateWithoutUserInput> | OtpTokenCreateWithoutUserInput[] | OtpTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpTokenCreateOrConnectWithoutUserInput | OtpTokenCreateOrConnectWithoutUserInput[]
    upsert?: OtpTokenUpsertWithWhereUniqueWithoutUserInput | OtpTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpTokenCreateManyUserInputEnvelope
    set?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    disconnect?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    delete?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    connect?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    update?: OtpTokenUpdateWithWhereUniqueWithoutUserInput | OtpTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpTokenUpdateManyWithWhereWithoutUserInput | OtpTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpTokenScalarWhereInput | OtpTokenScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgreementUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AgreementCreateWithoutCreatorInput, AgreementUncheckedCreateWithoutCreatorInput> | AgreementCreateWithoutCreatorInput[] | AgreementUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutCreatorInput | AgreementCreateOrConnectWithoutCreatorInput[]
    upsert?: AgreementUpsertWithWhereUniqueWithoutCreatorInput | AgreementUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AgreementCreateManyCreatorInputEnvelope
    set?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    disconnect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    delete?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    update?: AgreementUpdateWithWhereUniqueWithoutCreatorInput | AgreementUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AgreementUpdateManyWithWhereWithoutCreatorInput | AgreementUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatorInput, DocumentUncheckedCreateWithoutCreatorInput> | DocumentCreateWithoutCreatorInput[] | DocumentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatorInput | DocumentCreateOrConnectWithoutCreatorInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatorInput | DocumentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: DocumentCreateManyCreatorInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatorInput | DocumentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatorInput | DocumentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ContactCreateWithoutCreatorInput, ContactUncheckedCreateWithoutCreatorInput> | ContactCreateWithoutCreatorInput[] | ContactUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatorInput | ContactCreateOrConnectWithoutCreatorInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutCreatorInput | ContactUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ContactCreateManyCreatorInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutCreatorInput | ContactUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutCreatorInput | ContactUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AgreementTrailUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<AgreementTrailCreateWithoutActorInput, AgreementTrailUncheckedCreateWithoutActorInput> | AgreementTrailCreateWithoutActorInput[] | AgreementTrailUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutActorInput | AgreementTrailCreateOrConnectWithoutActorInput[]
    upsert?: AgreementTrailUpsertWithWhereUniqueWithoutActorInput | AgreementTrailUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AgreementTrailCreateManyActorInputEnvelope
    set?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    disconnect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    delete?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    update?: AgreementTrailUpdateWithWhereUniqueWithoutActorInput | AgreementTrailUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AgreementTrailUpdateManyWithWhereWithoutActorInput | AgreementTrailUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AgreementTrailScalarWhereInput | AgreementTrailScalarWhereInput[]
  }

  export type OtpTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpTokenCreateWithoutUserInput, OtpTokenUncheckedCreateWithoutUserInput> | OtpTokenCreateWithoutUserInput[] | OtpTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpTokenCreateOrConnectWithoutUserInput | OtpTokenCreateOrConnectWithoutUserInput[]
    upsert?: OtpTokenUpsertWithWhereUniqueWithoutUserInput | OtpTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpTokenCreateManyUserInputEnvelope
    set?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    disconnect?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    delete?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    connect?: OtpTokenWhereUniqueInput | OtpTokenWhereUniqueInput[]
    update?: OtpTokenUpdateWithWhereUniqueWithoutUserInput | OtpTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpTokenUpdateManyWithWhereWithoutUserInput | OtpTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpTokenScalarWhereInput | OtpTokenScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAgreementsInput = {
    create?: XOR<UserCreateWithoutAgreementsInput, UserUncheckedCreateWithoutAgreementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgreementsInput
    connect?: UserWhereUniqueInput
  }

  export type AgreementTrailCreateNestedManyWithoutAgreementInput = {
    create?: XOR<AgreementTrailCreateWithoutAgreementInput, AgreementTrailUncheckedCreateWithoutAgreementInput> | AgreementTrailCreateWithoutAgreementInput[] | AgreementTrailUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutAgreementInput | AgreementTrailCreateOrConnectWithoutAgreementInput[]
    createMany?: AgreementTrailCreateManyAgreementInputEnvelope
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
  }

  export type AgreementSignerCreateNestedManyWithoutAgreementInput = {
    create?: XOR<AgreementSignerCreateWithoutAgreementInput, AgreementSignerUncheckedCreateWithoutAgreementInput> | AgreementSignerCreateWithoutAgreementInput[] | AgreementSignerUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementSignerCreateOrConnectWithoutAgreementInput | AgreementSignerCreateOrConnectWithoutAgreementInput[]
    createMany?: AgreementSignerCreateManyAgreementInputEnvelope
    connect?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
  }

  export type SigningTokenCreateNestedManyWithoutAgreementInput = {
    create?: XOR<SigningTokenCreateWithoutAgreementInput, SigningTokenUncheckedCreateWithoutAgreementInput> | SigningTokenCreateWithoutAgreementInput[] | SigningTokenUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: SigningTokenCreateOrConnectWithoutAgreementInput | SigningTokenCreateOrConnectWithoutAgreementInput[]
    createMany?: SigningTokenCreateManyAgreementInputEnvelope
    connect?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
  }

  export type AgreementTrailUncheckedCreateNestedManyWithoutAgreementInput = {
    create?: XOR<AgreementTrailCreateWithoutAgreementInput, AgreementTrailUncheckedCreateWithoutAgreementInput> | AgreementTrailCreateWithoutAgreementInput[] | AgreementTrailUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutAgreementInput | AgreementTrailCreateOrConnectWithoutAgreementInput[]
    createMany?: AgreementTrailCreateManyAgreementInputEnvelope
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
  }

  export type AgreementSignerUncheckedCreateNestedManyWithoutAgreementInput = {
    create?: XOR<AgreementSignerCreateWithoutAgreementInput, AgreementSignerUncheckedCreateWithoutAgreementInput> | AgreementSignerCreateWithoutAgreementInput[] | AgreementSignerUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementSignerCreateOrConnectWithoutAgreementInput | AgreementSignerCreateOrConnectWithoutAgreementInput[]
    createMany?: AgreementSignerCreateManyAgreementInputEnvelope
    connect?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
  }

  export type SigningTokenUncheckedCreateNestedManyWithoutAgreementInput = {
    create?: XOR<SigningTokenCreateWithoutAgreementInput, SigningTokenUncheckedCreateWithoutAgreementInput> | SigningTokenCreateWithoutAgreementInput[] | SigningTokenUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: SigningTokenCreateOrConnectWithoutAgreementInput | SigningTokenCreateOrConnectWithoutAgreementInput[]
    createMany?: SigningTokenCreateManyAgreementInputEnvelope
    connect?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
  }

  export type EnumAgreementStatusFieldUpdateOperationsInput = {
    set?: $Enums.AgreementStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAgreementsNestedInput = {
    create?: XOR<UserCreateWithoutAgreementsInput, UserUncheckedCreateWithoutAgreementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgreementsInput
    upsert?: UserUpsertWithoutAgreementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAgreementsInput, UserUpdateWithoutAgreementsInput>, UserUncheckedUpdateWithoutAgreementsInput>
  }

  export type AgreementTrailUpdateManyWithoutAgreementNestedInput = {
    create?: XOR<AgreementTrailCreateWithoutAgreementInput, AgreementTrailUncheckedCreateWithoutAgreementInput> | AgreementTrailCreateWithoutAgreementInput[] | AgreementTrailUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutAgreementInput | AgreementTrailCreateOrConnectWithoutAgreementInput[]
    upsert?: AgreementTrailUpsertWithWhereUniqueWithoutAgreementInput | AgreementTrailUpsertWithWhereUniqueWithoutAgreementInput[]
    createMany?: AgreementTrailCreateManyAgreementInputEnvelope
    set?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    disconnect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    delete?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    update?: AgreementTrailUpdateWithWhereUniqueWithoutAgreementInput | AgreementTrailUpdateWithWhereUniqueWithoutAgreementInput[]
    updateMany?: AgreementTrailUpdateManyWithWhereWithoutAgreementInput | AgreementTrailUpdateManyWithWhereWithoutAgreementInput[]
    deleteMany?: AgreementTrailScalarWhereInput | AgreementTrailScalarWhereInput[]
  }

  export type AgreementSignerUpdateManyWithoutAgreementNestedInput = {
    create?: XOR<AgreementSignerCreateWithoutAgreementInput, AgreementSignerUncheckedCreateWithoutAgreementInput> | AgreementSignerCreateWithoutAgreementInput[] | AgreementSignerUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementSignerCreateOrConnectWithoutAgreementInput | AgreementSignerCreateOrConnectWithoutAgreementInput[]
    upsert?: AgreementSignerUpsertWithWhereUniqueWithoutAgreementInput | AgreementSignerUpsertWithWhereUniqueWithoutAgreementInput[]
    createMany?: AgreementSignerCreateManyAgreementInputEnvelope
    set?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    disconnect?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    delete?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    connect?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    update?: AgreementSignerUpdateWithWhereUniqueWithoutAgreementInput | AgreementSignerUpdateWithWhereUniqueWithoutAgreementInput[]
    updateMany?: AgreementSignerUpdateManyWithWhereWithoutAgreementInput | AgreementSignerUpdateManyWithWhereWithoutAgreementInput[]
    deleteMany?: AgreementSignerScalarWhereInput | AgreementSignerScalarWhereInput[]
  }

  export type SigningTokenUpdateManyWithoutAgreementNestedInput = {
    create?: XOR<SigningTokenCreateWithoutAgreementInput, SigningTokenUncheckedCreateWithoutAgreementInput> | SigningTokenCreateWithoutAgreementInput[] | SigningTokenUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: SigningTokenCreateOrConnectWithoutAgreementInput | SigningTokenCreateOrConnectWithoutAgreementInput[]
    upsert?: SigningTokenUpsertWithWhereUniqueWithoutAgreementInput | SigningTokenUpsertWithWhereUniqueWithoutAgreementInput[]
    createMany?: SigningTokenCreateManyAgreementInputEnvelope
    set?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    disconnect?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    delete?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    connect?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    update?: SigningTokenUpdateWithWhereUniqueWithoutAgreementInput | SigningTokenUpdateWithWhereUniqueWithoutAgreementInput[]
    updateMany?: SigningTokenUpdateManyWithWhereWithoutAgreementInput | SigningTokenUpdateManyWithWhereWithoutAgreementInput[]
    deleteMany?: SigningTokenScalarWhereInput | SigningTokenScalarWhereInput[]
  }

  export type AgreementTrailUncheckedUpdateManyWithoutAgreementNestedInput = {
    create?: XOR<AgreementTrailCreateWithoutAgreementInput, AgreementTrailUncheckedCreateWithoutAgreementInput> | AgreementTrailCreateWithoutAgreementInput[] | AgreementTrailUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementTrailCreateOrConnectWithoutAgreementInput | AgreementTrailCreateOrConnectWithoutAgreementInput[]
    upsert?: AgreementTrailUpsertWithWhereUniqueWithoutAgreementInput | AgreementTrailUpsertWithWhereUniqueWithoutAgreementInput[]
    createMany?: AgreementTrailCreateManyAgreementInputEnvelope
    set?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    disconnect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    delete?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    connect?: AgreementTrailWhereUniqueInput | AgreementTrailWhereUniqueInput[]
    update?: AgreementTrailUpdateWithWhereUniqueWithoutAgreementInput | AgreementTrailUpdateWithWhereUniqueWithoutAgreementInput[]
    updateMany?: AgreementTrailUpdateManyWithWhereWithoutAgreementInput | AgreementTrailUpdateManyWithWhereWithoutAgreementInput[]
    deleteMany?: AgreementTrailScalarWhereInput | AgreementTrailScalarWhereInput[]
  }

  export type AgreementSignerUncheckedUpdateManyWithoutAgreementNestedInput = {
    create?: XOR<AgreementSignerCreateWithoutAgreementInput, AgreementSignerUncheckedCreateWithoutAgreementInput> | AgreementSignerCreateWithoutAgreementInput[] | AgreementSignerUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: AgreementSignerCreateOrConnectWithoutAgreementInput | AgreementSignerCreateOrConnectWithoutAgreementInput[]
    upsert?: AgreementSignerUpsertWithWhereUniqueWithoutAgreementInput | AgreementSignerUpsertWithWhereUniqueWithoutAgreementInput[]
    createMany?: AgreementSignerCreateManyAgreementInputEnvelope
    set?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    disconnect?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    delete?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    connect?: AgreementSignerWhereUniqueInput | AgreementSignerWhereUniqueInput[]
    update?: AgreementSignerUpdateWithWhereUniqueWithoutAgreementInput | AgreementSignerUpdateWithWhereUniqueWithoutAgreementInput[]
    updateMany?: AgreementSignerUpdateManyWithWhereWithoutAgreementInput | AgreementSignerUpdateManyWithWhereWithoutAgreementInput[]
    deleteMany?: AgreementSignerScalarWhereInput | AgreementSignerScalarWhereInput[]
  }

  export type SigningTokenUncheckedUpdateManyWithoutAgreementNestedInput = {
    create?: XOR<SigningTokenCreateWithoutAgreementInput, SigningTokenUncheckedCreateWithoutAgreementInput> | SigningTokenCreateWithoutAgreementInput[] | SigningTokenUncheckedCreateWithoutAgreementInput[]
    connectOrCreate?: SigningTokenCreateOrConnectWithoutAgreementInput | SigningTokenCreateOrConnectWithoutAgreementInput[]
    upsert?: SigningTokenUpsertWithWhereUniqueWithoutAgreementInput | SigningTokenUpsertWithWhereUniqueWithoutAgreementInput[]
    createMany?: SigningTokenCreateManyAgreementInputEnvelope
    set?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    disconnect?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    delete?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    connect?: SigningTokenWhereUniqueInput | SigningTokenWhereUniqueInput[]
    update?: SigningTokenUpdateWithWhereUniqueWithoutAgreementInput | SigningTokenUpdateWithWhereUniqueWithoutAgreementInput[]
    updateMany?: SigningTokenUpdateManyWithWhereWithoutAgreementInput | SigningTokenUpdateManyWithWhereWithoutAgreementInput[]
    deleteMany?: SigningTokenScalarWhereInput | SigningTokenScalarWhereInput[]
  }

  export type AgreementCreateNestedOneWithoutTrailsInput = {
    create?: XOR<AgreementCreateWithoutTrailsInput, AgreementUncheckedCreateWithoutTrailsInput>
    connectOrCreate?: AgreementCreateOrConnectWithoutTrailsInput
    connect?: AgreementWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTrailsInput = {
    create?: XOR<UserCreateWithoutTrailsInput, UserUncheckedCreateWithoutTrailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrailsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumActorRoleFieldUpdateOperationsInput = {
    set?: $Enums.ActorRole
  }

  export type EnumActorActionFieldUpdateOperationsInput = {
    set?: $Enums.ActorAction
  }

  export type AgreementUpdateOneRequiredWithoutTrailsNestedInput = {
    create?: XOR<AgreementCreateWithoutTrailsInput, AgreementUncheckedCreateWithoutTrailsInput>
    connectOrCreate?: AgreementCreateOrConnectWithoutTrailsInput
    upsert?: AgreementUpsertWithoutTrailsInput
    connect?: AgreementWhereUniqueInput
    update?: XOR<XOR<AgreementUpdateToOneWithWhereWithoutTrailsInput, AgreementUpdateWithoutTrailsInput>, AgreementUncheckedUpdateWithoutTrailsInput>
  }

  export type UserUpdateOneWithoutTrailsNestedInput = {
    create?: XOR<UserCreateWithoutTrailsInput, UserUncheckedCreateWithoutTrailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrailsInput
    upsert?: UserUpsertWithoutTrailsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrailsInput, UserUpdateWithoutTrailsInput>, UserUncheckedUpdateWithoutTrailsInput>
  }

  export type AgreementCreateNestedOneWithoutSignersInput = {
    create?: XOR<AgreementCreateWithoutSignersInput, AgreementUncheckedCreateWithoutSignersInput>
    connectOrCreate?: AgreementCreateOrConnectWithoutSignersInput
    connect?: AgreementWhereUniqueInput
  }

  export type EnumSignerStatusFieldUpdateOperationsInput = {
    set?: $Enums.SignerStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AgreementUpdateOneRequiredWithoutSignersNestedInput = {
    create?: XOR<AgreementCreateWithoutSignersInput, AgreementUncheckedCreateWithoutSignersInput>
    connectOrCreate?: AgreementCreateOrConnectWithoutSignersInput
    upsert?: AgreementUpsertWithoutSignersInput
    connect?: AgreementWhereUniqueInput
    update?: XOR<XOR<AgreementUpdateToOneWithWhereWithoutSignersInput, AgreementUpdateWithoutSignersInput>, AgreementUncheckedUpdateWithoutSignersInput>
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedOneWithoutContactsInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    upsert?: UserUpsertWithoutContactsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactsInput, UserUpdateWithoutContactsInput>, UserUncheckedUpdateWithoutContactsInput>
  }

  export type AgreementCreateNestedOneWithoutSigningTokensInput = {
    create?: XOR<AgreementCreateWithoutSigningTokensInput, AgreementUncheckedCreateWithoutSigningTokensInput>
    connectOrCreate?: AgreementCreateOrConnectWithoutSigningTokensInput
    connect?: AgreementWhereUniqueInput
  }

  export type AgreementUpdateOneRequiredWithoutSigningTokensNestedInput = {
    create?: XOR<AgreementCreateWithoutSigningTokensInput, AgreementUncheckedCreateWithoutSigningTokensInput>
    connectOrCreate?: AgreementCreateOrConnectWithoutSigningTokensInput
    upsert?: AgreementUpsertWithoutSigningTokensInput
    connect?: AgreementWhereUniqueInput
    update?: XOR<XOR<AgreementUpdateToOneWithWhereWithoutSigningTokensInput, AgreementUpdateWithoutSigningTokensInput>, AgreementUncheckedUpdateWithoutSigningTokensInput>
  }

  export type UserCreateNestedOneWithoutOtpTokensInput = {
    create?: XOR<UserCreateWithoutOtpTokensInput, UserUncheckedCreateWithoutOtpTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOtpTokensNestedInput = {
    create?: XOR<UserCreateWithoutOtpTokensInput, UserUncheckedCreateWithoutOtpTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpTokensInput
    upsert?: UserUpsertWithoutOtpTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtpTokensInput, UserUpdateWithoutOtpTokensInput>, UserUncheckedUpdateWithoutOtpTokensInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAgreementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusFilter<$PrismaModel> | $Enums.AgreementStatus
  }

  export type NestedEnumAgreementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusWithAggregatesFilter<$PrismaModel> | $Enums.AgreementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAgreementStatusFilter<$PrismaModel>
    _max?: NestedEnumAgreementStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumActorRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorRole | EnumActorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumActorRoleFilter<$PrismaModel> | $Enums.ActorRole
  }

  export type NestedEnumActorActionFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorAction | EnumActorActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActorActionFilter<$PrismaModel> | $Enums.ActorAction
  }

  export type NestedEnumActorRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorRole | EnumActorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorRole[] | ListEnumActorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumActorRoleWithAggregatesFilter<$PrismaModel> | $Enums.ActorRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActorRoleFilter<$PrismaModel>
    _max?: NestedEnumActorRoleFilter<$PrismaModel>
  }

  export type NestedEnumActorActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActorAction | EnumActorActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActorAction[] | ListEnumActorActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActorActionWithAggregatesFilter<$PrismaModel> | $Enums.ActorAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActorActionFilter<$PrismaModel>
    _max?: NestedEnumActorActionFilter<$PrismaModel>
  }

  export type NestedEnumSignerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SignerStatus | EnumSignerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSignerStatusFilter<$PrismaModel> | $Enums.SignerStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumSignerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignerStatus | EnumSignerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignerStatus[] | ListEnumSignerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSignerStatusWithAggregatesFilter<$PrismaModel> | $Enums.SignerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignerStatusFilter<$PrismaModel>
    _max?: NestedEnumSignerStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type AgreementCreateWithoutCreatorInput = {
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    trails?: AgreementTrailCreateNestedManyWithoutAgreementInput
    signers?: AgreementSignerCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenCreateNestedManyWithoutAgreementInput
  }

  export type AgreementUncheckedCreateWithoutCreatorInput = {
    id?: number
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutAgreementInput
    signers?: AgreementSignerUncheckedCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenUncheckedCreateNestedManyWithoutAgreementInput
  }

  export type AgreementCreateOrConnectWithoutCreatorInput = {
    where: AgreementWhereUniqueInput
    create: XOR<AgreementCreateWithoutCreatorInput, AgreementUncheckedCreateWithoutCreatorInput>
  }

  export type AgreementCreateManyCreatorInputEnvelope = {
    data: AgreementCreateManyCreatorInput | AgreementCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutCreatorInput = {
    name: string
    fileUrl?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type DocumentUncheckedCreateWithoutCreatorInput = {
    id?: number
    name: string
    fileUrl?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type DocumentCreateOrConnectWithoutCreatorInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCreatorInput, DocumentUncheckedCreateWithoutCreatorInput>
  }

  export type DocumentCreateManyCreatorInputEnvelope = {
    data: DocumentCreateManyCreatorInput | DocumentCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutCreatorInput = {
    email: string
    name: string
    createdAt?: Date | string
  }

  export type ContactUncheckedCreateWithoutCreatorInput = {
    id?: number
    email: string
    name: string
    createdAt?: Date | string
  }

  export type ContactCreateOrConnectWithoutCreatorInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutCreatorInput, ContactUncheckedCreateWithoutCreatorInput>
  }

  export type ContactCreateManyCreatorInputEnvelope = {
    data: ContactCreateManyCreatorInput | ContactCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type AgreementTrailCreateWithoutActorInput = {
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
    agreement: AgreementCreateNestedOneWithoutTrailsInput
  }

  export type AgreementTrailUncheckedCreateWithoutActorInput = {
    id?: number
    agreementId: number
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
  }

  export type AgreementTrailCreateOrConnectWithoutActorInput = {
    where: AgreementTrailWhereUniqueInput
    create: XOR<AgreementTrailCreateWithoutActorInput, AgreementTrailUncheckedCreateWithoutActorInput>
  }

  export type AgreementTrailCreateManyActorInputEnvelope = {
    data: AgreementTrailCreateManyActorInput | AgreementTrailCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type OtpTokenCreateWithoutUserInput = {
    otpCode: string
    createdAt?: Date | string
    expiresAt: Date | string
    verifiedAt?: Date | string | null
    purpose: string
  }

  export type OtpTokenUncheckedCreateWithoutUserInput = {
    id?: number
    otpCode: string
    createdAt?: Date | string
    expiresAt: Date | string
    verifiedAt?: Date | string | null
    purpose: string
  }

  export type OtpTokenCreateOrConnectWithoutUserInput = {
    where: OtpTokenWhereUniqueInput
    create: XOR<OtpTokenCreateWithoutUserInput, OtpTokenUncheckedCreateWithoutUserInput>
  }

  export type OtpTokenCreateManyUserInputEnvelope = {
    data: OtpTokenCreateManyUserInput | OtpTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AgreementUpsertWithWhereUniqueWithoutCreatorInput = {
    where: AgreementWhereUniqueInput
    update: XOR<AgreementUpdateWithoutCreatorInput, AgreementUncheckedUpdateWithoutCreatorInput>
    create: XOR<AgreementCreateWithoutCreatorInput, AgreementUncheckedCreateWithoutCreatorInput>
  }

  export type AgreementUpdateWithWhereUniqueWithoutCreatorInput = {
    where: AgreementWhereUniqueInput
    data: XOR<AgreementUpdateWithoutCreatorInput, AgreementUncheckedUpdateWithoutCreatorInput>
  }

  export type AgreementUpdateManyWithWhereWithoutCreatorInput = {
    where: AgreementScalarWhereInput
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AgreementScalarWhereInput = {
    AND?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
    OR?: AgreementScalarWhereInput[]
    NOT?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
    id?: IntFilter<"Agreement"> | number
    name?: StringFilter<"Agreement"> | string
    creatorId?: IntFilter<"Agreement"> | number
    fileUrl?: StringFilter<"Agreement"> | string
    receiverEmail?: StringFilter<"Agreement"> | string
    status?: EnumAgreementStatusFilter<"Agreement"> | $Enums.AgreementStatus
    signatureCoords?: StringNullableFilter<"Agreement"> | string | null
    createdAt?: DateTimeFilter<"Agreement"> | Date | string
    mimeType?: StringNullableFilter<"Agreement"> | string | null
    fileSize?: IntNullableFilter<"Agreement"> | number | null
    originalFilename?: StringNullableFilter<"Agreement"> | string | null
  }

  export type DocumentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutCreatorInput, DocumentUncheckedUpdateWithoutCreatorInput>
    create: XOR<DocumentCreateWithoutCreatorInput, DocumentUncheckedCreateWithoutCreatorInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutCreatorInput, DocumentUncheckedUpdateWithoutCreatorInput>
  }

  export type DocumentUpdateManyWithWhereWithoutCreatorInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutCreatorInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: IntFilter<"Document"> | number
    name?: StringFilter<"Document"> | string
    fileUrl?: StringNullableFilter<"Document"> | string | null
    creatorId?: IntFilter<"Document"> | number
    createdAt?: DateTimeFilter<"Document"> | Date | string
    mimeType?: StringNullableFilter<"Document"> | string | null
    fileSize?: IntNullableFilter<"Document"> | number | null
    originalFilename?: StringNullableFilter<"Document"> | string | null
  }

  export type ContactUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutCreatorInput, ContactUncheckedUpdateWithoutCreatorInput>
    create: XOR<ContactCreateWithoutCreatorInput, ContactUncheckedCreateWithoutCreatorInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutCreatorInput, ContactUncheckedUpdateWithoutCreatorInput>
  }

  export type ContactUpdateManyWithWhereWithoutCreatorInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: IntFilter<"Contact"> | number
    email?: StringFilter<"Contact"> | string
    name?: StringFilter<"Contact"> | string
    creatorId?: IntFilter<"Contact"> | number
    createdAt?: DateTimeFilter<"Contact"> | Date | string
  }

  export type AgreementTrailUpsertWithWhereUniqueWithoutActorInput = {
    where: AgreementTrailWhereUniqueInput
    update: XOR<AgreementTrailUpdateWithoutActorInput, AgreementTrailUncheckedUpdateWithoutActorInput>
    create: XOR<AgreementTrailCreateWithoutActorInput, AgreementTrailUncheckedCreateWithoutActorInput>
  }

  export type AgreementTrailUpdateWithWhereUniqueWithoutActorInput = {
    where: AgreementTrailWhereUniqueInput
    data: XOR<AgreementTrailUpdateWithoutActorInput, AgreementTrailUncheckedUpdateWithoutActorInput>
  }

  export type AgreementTrailUpdateManyWithWhereWithoutActorInput = {
    where: AgreementTrailScalarWhereInput
    data: XOR<AgreementTrailUpdateManyMutationInput, AgreementTrailUncheckedUpdateManyWithoutActorInput>
  }

  export type AgreementTrailScalarWhereInput = {
    AND?: AgreementTrailScalarWhereInput | AgreementTrailScalarWhereInput[]
    OR?: AgreementTrailScalarWhereInput[]
    NOT?: AgreementTrailScalarWhereInput | AgreementTrailScalarWhereInput[]
    id?: IntFilter<"AgreementTrail"> | number
    agreementId?: IntFilter<"AgreementTrail"> | number
    actorId?: IntNullableFilter<"AgreementTrail"> | number | null
    actorRole?: EnumActorRoleFilter<"AgreementTrail"> | $Enums.ActorRole
    actorAction?: EnumActorActionFilter<"AgreementTrail"> | $Enums.ActorAction
    createdAt?: DateTimeFilter<"AgreementTrail"> | Date | string
    ipAddress?: StringNullableFilter<"AgreementTrail"> | string | null
    previousLogHash?: StringNullableFilter<"AgreementTrail"> | string | null
    logHash?: StringNullableFilter<"AgreementTrail"> | string | null
  }

  export type OtpTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: OtpTokenWhereUniqueInput
    update: XOR<OtpTokenUpdateWithoutUserInput, OtpTokenUncheckedUpdateWithoutUserInput>
    create: XOR<OtpTokenCreateWithoutUserInput, OtpTokenUncheckedCreateWithoutUserInput>
  }

  export type OtpTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: OtpTokenWhereUniqueInput
    data: XOR<OtpTokenUpdateWithoutUserInput, OtpTokenUncheckedUpdateWithoutUserInput>
  }

  export type OtpTokenUpdateManyWithWhereWithoutUserInput = {
    where: OtpTokenScalarWhereInput
    data: XOR<OtpTokenUpdateManyMutationInput, OtpTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type OtpTokenScalarWhereInput = {
    AND?: OtpTokenScalarWhereInput | OtpTokenScalarWhereInput[]
    OR?: OtpTokenScalarWhereInput[]
    NOT?: OtpTokenScalarWhereInput | OtpTokenScalarWhereInput[]
    id?: IntFilter<"OtpToken"> | number
    userId?: IntFilter<"OtpToken"> | number
    otpCode?: StringFilter<"OtpToken"> | string
    createdAt?: DateTimeFilter<"OtpToken"> | Date | string
    expiresAt?: DateTimeFilter<"OtpToken"> | Date | string
    verifiedAt?: DateTimeNullableFilter<"OtpToken"> | Date | string | null
    purpose?: StringFilter<"OtpToken"> | string
  }

  export type UserCreateWithoutAgreementsInput = {
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    documents?: DocumentCreateNestedManyWithoutCreatorInput
    contacts?: ContactCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAgreementsInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatorInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAgreementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgreementsInput, UserUncheckedCreateWithoutAgreementsInput>
  }

  export type AgreementTrailCreateWithoutAgreementInput = {
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
    actor?: UserCreateNestedOneWithoutTrailsInput
  }

  export type AgreementTrailUncheckedCreateWithoutAgreementInput = {
    id?: number
    actorId?: number | null
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
  }

  export type AgreementTrailCreateOrConnectWithoutAgreementInput = {
    where: AgreementTrailWhereUniqueInput
    create: XOR<AgreementTrailCreateWithoutAgreementInput, AgreementTrailUncheckedCreateWithoutAgreementInput>
  }

  export type AgreementTrailCreateManyAgreementInputEnvelope = {
    data: AgreementTrailCreateManyAgreementInput | AgreementTrailCreateManyAgreementInput[]
    skipDuplicates?: boolean
  }

  export type AgreementSignerCreateWithoutAgreementInput = {
    signerEmail: string
    signerName?: string | null
    status: $Enums.SignerStatus
    signedAt?: Date | string | null
    signatureCoords?: string | null
  }

  export type AgreementSignerUncheckedCreateWithoutAgreementInput = {
    id?: number
    signerEmail: string
    signerName?: string | null
    status: $Enums.SignerStatus
    signedAt?: Date | string | null
    signatureCoords?: string | null
  }

  export type AgreementSignerCreateOrConnectWithoutAgreementInput = {
    where: AgreementSignerWhereUniqueInput
    create: XOR<AgreementSignerCreateWithoutAgreementInput, AgreementSignerUncheckedCreateWithoutAgreementInput>
  }

  export type AgreementSignerCreateManyAgreementInputEnvelope = {
    data: AgreementSignerCreateManyAgreementInput | AgreementSignerCreateManyAgreementInput[]
    skipDuplicates?: boolean
  }

  export type SigningTokenCreateWithoutAgreementInput = {
    signerEmail: string
    token: string
    expiresAt?: Date | string | null
    usedAt?: Date | string | null
  }

  export type SigningTokenUncheckedCreateWithoutAgreementInput = {
    id?: number
    signerEmail: string
    token: string
    expiresAt?: Date | string | null
    usedAt?: Date | string | null
  }

  export type SigningTokenCreateOrConnectWithoutAgreementInput = {
    where: SigningTokenWhereUniqueInput
    create: XOR<SigningTokenCreateWithoutAgreementInput, SigningTokenUncheckedCreateWithoutAgreementInput>
  }

  export type SigningTokenCreateManyAgreementInputEnvelope = {
    data: SigningTokenCreateManyAgreementInput | SigningTokenCreateManyAgreementInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAgreementsInput = {
    update: XOR<UserUpdateWithoutAgreementsInput, UserUncheckedUpdateWithoutAgreementsInput>
    create: XOR<UserCreateWithoutAgreementsInput, UserUncheckedCreateWithoutAgreementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAgreementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAgreementsInput, UserUncheckedUpdateWithoutAgreementsInput>
  }

  export type UserUpdateWithoutAgreementsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    documents?: DocumentUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAgreementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    documents?: DocumentUncheckedUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUncheckedUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgreementTrailUpsertWithWhereUniqueWithoutAgreementInput = {
    where: AgreementTrailWhereUniqueInput
    update: XOR<AgreementTrailUpdateWithoutAgreementInput, AgreementTrailUncheckedUpdateWithoutAgreementInput>
    create: XOR<AgreementTrailCreateWithoutAgreementInput, AgreementTrailUncheckedCreateWithoutAgreementInput>
  }

  export type AgreementTrailUpdateWithWhereUniqueWithoutAgreementInput = {
    where: AgreementTrailWhereUniqueInput
    data: XOR<AgreementTrailUpdateWithoutAgreementInput, AgreementTrailUncheckedUpdateWithoutAgreementInput>
  }

  export type AgreementTrailUpdateManyWithWhereWithoutAgreementInput = {
    where: AgreementTrailScalarWhereInput
    data: XOR<AgreementTrailUpdateManyMutationInput, AgreementTrailUncheckedUpdateManyWithoutAgreementInput>
  }

  export type AgreementSignerUpsertWithWhereUniqueWithoutAgreementInput = {
    where: AgreementSignerWhereUniqueInput
    update: XOR<AgreementSignerUpdateWithoutAgreementInput, AgreementSignerUncheckedUpdateWithoutAgreementInput>
    create: XOR<AgreementSignerCreateWithoutAgreementInput, AgreementSignerUncheckedCreateWithoutAgreementInput>
  }

  export type AgreementSignerUpdateWithWhereUniqueWithoutAgreementInput = {
    where: AgreementSignerWhereUniqueInput
    data: XOR<AgreementSignerUpdateWithoutAgreementInput, AgreementSignerUncheckedUpdateWithoutAgreementInput>
  }

  export type AgreementSignerUpdateManyWithWhereWithoutAgreementInput = {
    where: AgreementSignerScalarWhereInput
    data: XOR<AgreementSignerUpdateManyMutationInput, AgreementSignerUncheckedUpdateManyWithoutAgreementInput>
  }

  export type AgreementSignerScalarWhereInput = {
    AND?: AgreementSignerScalarWhereInput | AgreementSignerScalarWhereInput[]
    OR?: AgreementSignerScalarWhereInput[]
    NOT?: AgreementSignerScalarWhereInput | AgreementSignerScalarWhereInput[]
    id?: IntFilter<"AgreementSigner"> | number
    agreementId?: IntFilter<"AgreementSigner"> | number
    signerEmail?: StringFilter<"AgreementSigner"> | string
    signerName?: StringNullableFilter<"AgreementSigner"> | string | null
    status?: EnumSignerStatusFilter<"AgreementSigner"> | $Enums.SignerStatus
    signedAt?: DateTimeNullableFilter<"AgreementSigner"> | Date | string | null
    signatureCoords?: StringNullableFilter<"AgreementSigner"> | string | null
  }

  export type SigningTokenUpsertWithWhereUniqueWithoutAgreementInput = {
    where: SigningTokenWhereUniqueInput
    update: XOR<SigningTokenUpdateWithoutAgreementInput, SigningTokenUncheckedUpdateWithoutAgreementInput>
    create: XOR<SigningTokenCreateWithoutAgreementInput, SigningTokenUncheckedCreateWithoutAgreementInput>
  }

  export type SigningTokenUpdateWithWhereUniqueWithoutAgreementInput = {
    where: SigningTokenWhereUniqueInput
    data: XOR<SigningTokenUpdateWithoutAgreementInput, SigningTokenUncheckedUpdateWithoutAgreementInput>
  }

  export type SigningTokenUpdateManyWithWhereWithoutAgreementInput = {
    where: SigningTokenScalarWhereInput
    data: XOR<SigningTokenUpdateManyMutationInput, SigningTokenUncheckedUpdateManyWithoutAgreementInput>
  }

  export type SigningTokenScalarWhereInput = {
    AND?: SigningTokenScalarWhereInput | SigningTokenScalarWhereInput[]
    OR?: SigningTokenScalarWhereInput[]
    NOT?: SigningTokenScalarWhereInput | SigningTokenScalarWhereInput[]
    id?: IntFilter<"SigningToken"> | number
    agreementId?: IntFilter<"SigningToken"> | number
    signerEmail?: StringFilter<"SigningToken"> | string
    token?: StringFilter<"SigningToken"> | string
    expiresAt?: DateTimeNullableFilter<"SigningToken"> | Date | string | null
    usedAt?: DateTimeNullableFilter<"SigningToken"> | Date | string | null
  }

  export type AgreementCreateWithoutTrailsInput = {
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    creator: UserCreateNestedOneWithoutAgreementsInput
    signers?: AgreementSignerCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenCreateNestedManyWithoutAgreementInput
  }

  export type AgreementUncheckedCreateWithoutTrailsInput = {
    id?: number
    name: string
    creatorId: number
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    signers?: AgreementSignerUncheckedCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenUncheckedCreateNestedManyWithoutAgreementInput
  }

  export type AgreementCreateOrConnectWithoutTrailsInput = {
    where: AgreementWhereUniqueInput
    create: XOR<AgreementCreateWithoutTrailsInput, AgreementUncheckedCreateWithoutTrailsInput>
  }

  export type UserCreateWithoutTrailsInput = {
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementCreateNestedManyWithoutCreatorInput
    documents?: DocumentCreateNestedManyWithoutCreatorInput
    contacts?: ContactCreateNestedManyWithoutCreatorInput
    otpTokens?: OtpTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTrailsInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementUncheckedCreateNestedManyWithoutCreatorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatorInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatorInput
    otpTokens?: OtpTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTrailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrailsInput, UserUncheckedCreateWithoutTrailsInput>
  }

  export type AgreementUpsertWithoutTrailsInput = {
    update: XOR<AgreementUpdateWithoutTrailsInput, AgreementUncheckedUpdateWithoutTrailsInput>
    create: XOR<AgreementCreateWithoutTrailsInput, AgreementUncheckedCreateWithoutTrailsInput>
    where?: AgreementWhereInput
  }

  export type AgreementUpdateToOneWithWhereWithoutTrailsInput = {
    where?: AgreementWhereInput
    data: XOR<AgreementUpdateWithoutTrailsInput, AgreementUncheckedUpdateWithoutTrailsInput>
  }

  export type AgreementUpdateWithoutTrailsInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutAgreementsNestedInput
    signers?: AgreementSignerUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementUncheckedUpdateWithoutTrailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    signers?: AgreementSignerUncheckedUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUncheckedUpdateManyWithoutAgreementNestedInput
  }

  export type UserUpsertWithoutTrailsInput = {
    update: XOR<UserUpdateWithoutTrailsInput, UserUncheckedUpdateWithoutTrailsInput>
    create: XOR<UserCreateWithoutTrailsInput, UserUncheckedCreateWithoutTrailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrailsInput, UserUncheckedUpdateWithoutTrailsInput>
  }

  export type UserUpdateWithoutTrailsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUpdateManyWithoutCreatorNestedInput
    otpTokens?: OtpTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTrailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUncheckedUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatorNestedInput
    otpTokens?: OtpTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgreementCreateWithoutSignersInput = {
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    creator: UserCreateNestedOneWithoutAgreementsInput
    trails?: AgreementTrailCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenCreateNestedManyWithoutAgreementInput
  }

  export type AgreementUncheckedCreateWithoutSignersInput = {
    id?: number
    name: string
    creatorId: number
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutAgreementInput
    signingTokens?: SigningTokenUncheckedCreateNestedManyWithoutAgreementInput
  }

  export type AgreementCreateOrConnectWithoutSignersInput = {
    where: AgreementWhereUniqueInput
    create: XOR<AgreementCreateWithoutSignersInput, AgreementUncheckedCreateWithoutSignersInput>
  }

  export type AgreementUpsertWithoutSignersInput = {
    update: XOR<AgreementUpdateWithoutSignersInput, AgreementUncheckedUpdateWithoutSignersInput>
    create: XOR<AgreementCreateWithoutSignersInput, AgreementUncheckedCreateWithoutSignersInput>
    where?: AgreementWhereInput
  }

  export type AgreementUpdateToOneWithWhereWithoutSignersInput = {
    where?: AgreementWhereInput
    data: XOR<AgreementUpdateWithoutSignersInput, AgreementUncheckedUpdateWithoutSignersInput>
  }

  export type AgreementUpdateWithoutSignersInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutAgreementsNestedInput
    trails?: AgreementTrailUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementUncheckedUpdateWithoutSignersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    trails?: AgreementTrailUncheckedUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUncheckedUpdateManyWithoutAgreementNestedInput
  }

  export type UserCreateWithoutDocumentsInput = {
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementCreateNestedManyWithoutCreatorInput
    contacts?: ContactCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementUncheckedCreateNestedManyWithoutCreatorInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUncheckedUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUncheckedUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutContactsInput = {
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementCreateNestedManyWithoutCreatorInput
    documents?: DocumentCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContactsInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementUncheckedCreateNestedManyWithoutCreatorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutActorInput
    otpTokens?: OtpTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContactsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
  }

  export type UserUpsertWithoutContactsInput = {
    update: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
  }

  export type UserUpdateWithoutContactsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUncheckedUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUncheckedUpdateManyWithoutActorNestedInput
    otpTokens?: OtpTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgreementCreateWithoutSigningTokensInput = {
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    creator: UserCreateNestedOneWithoutAgreementsInput
    trails?: AgreementTrailCreateNestedManyWithoutAgreementInput
    signers?: AgreementSignerCreateNestedManyWithoutAgreementInput
  }

  export type AgreementUncheckedCreateWithoutSigningTokensInput = {
    id?: number
    name: string
    creatorId: number
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutAgreementInput
    signers?: AgreementSignerUncheckedCreateNestedManyWithoutAgreementInput
  }

  export type AgreementCreateOrConnectWithoutSigningTokensInput = {
    where: AgreementWhereUniqueInput
    create: XOR<AgreementCreateWithoutSigningTokensInput, AgreementUncheckedCreateWithoutSigningTokensInput>
  }

  export type AgreementUpsertWithoutSigningTokensInput = {
    update: XOR<AgreementUpdateWithoutSigningTokensInput, AgreementUncheckedUpdateWithoutSigningTokensInput>
    create: XOR<AgreementCreateWithoutSigningTokensInput, AgreementUncheckedCreateWithoutSigningTokensInput>
    where?: AgreementWhereInput
  }

  export type AgreementUpdateToOneWithWhereWithoutSigningTokensInput = {
    where?: AgreementWhereInput
    data: XOR<AgreementUpdateWithoutSigningTokensInput, AgreementUncheckedUpdateWithoutSigningTokensInput>
  }

  export type AgreementUpdateWithoutSigningTokensInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutAgreementsNestedInput
    trails?: AgreementTrailUpdateManyWithoutAgreementNestedInput
    signers?: AgreementSignerUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementUncheckedUpdateWithoutSigningTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creatorId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    trails?: AgreementTrailUncheckedUpdateManyWithoutAgreementNestedInput
    signers?: AgreementSignerUncheckedUpdateManyWithoutAgreementNestedInput
  }

  export type UserCreateWithoutOtpTokensInput = {
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementCreateNestedManyWithoutCreatorInput
    documents?: DocumentCreateNestedManyWithoutCreatorInput
    contacts?: ContactCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailCreateNestedManyWithoutActorInput
  }

  export type UserUncheckedCreateWithoutOtpTokensInput = {
    id?: number
    email: string
    password: string
    role: string
    createdAt?: Date | string
    provider?: string
    avatar?: string | null
    isVerified?: boolean
    agreements?: AgreementUncheckedCreateNestedManyWithoutCreatorInput
    documents?: DocumentUncheckedCreateNestedManyWithoutCreatorInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatorInput
    trails?: AgreementTrailUncheckedCreateNestedManyWithoutActorInput
  }

  export type UserCreateOrConnectWithoutOtpTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtpTokensInput, UserUncheckedCreateWithoutOtpTokensInput>
  }

  export type UserUpsertWithoutOtpTokensInput = {
    update: XOR<UserUpdateWithoutOtpTokensInput, UserUncheckedUpdateWithoutOtpTokensInput>
    create: XOR<UserCreateWithoutOtpTokensInput, UserUncheckedCreateWithoutOtpTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtpTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtpTokensInput, UserUncheckedUpdateWithoutOtpTokensInput>
  }

  export type UserUpdateWithoutOtpTokensInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUpdateManyWithoutActorNestedInput
  }

  export type UserUncheckedUpdateWithoutOtpTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    agreements?: AgreementUncheckedUpdateManyWithoutCreatorNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutCreatorNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatorNestedInput
    trails?: AgreementTrailUncheckedUpdateManyWithoutActorNestedInput
  }

  export type AgreementCreateManyCreatorInput = {
    id?: number
    name: string
    fileUrl: string
    receiverEmail: string
    status: $Enums.AgreementStatus
    signatureCoords?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type DocumentCreateManyCreatorInput = {
    id?: number
    name: string
    fileUrl?: string | null
    createdAt?: Date | string
    mimeType?: string | null
    fileSize?: number | null
    originalFilename?: string | null
  }

  export type ContactCreateManyCreatorInput = {
    id?: number
    email: string
    name: string
    createdAt?: Date | string
  }

  export type AgreementTrailCreateManyActorInput = {
    id?: number
    agreementId: number
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
  }

  export type OtpTokenCreateManyUserInput = {
    id?: number
    otpCode: string
    createdAt?: Date | string
    expiresAt: Date | string
    verifiedAt?: Date | string | null
    purpose: string
  }

  export type AgreementUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    trails?: AgreementTrailUpdateManyWithoutAgreementNestedInput
    signers?: AgreementSignerUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
    trails?: AgreementTrailUncheckedUpdateManyWithoutAgreementNestedInput
    signers?: AgreementSignerUncheckedUpdateManyWithoutAgreementNestedInput
    signingTokens?: SigningTokenUncheckedUpdateManyWithoutAgreementNestedInput
  }

  export type AgreementUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    receiverEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    originalFilename?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUpdateWithoutCreatorInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgreementTrailUpdateWithoutActorInput = {
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
    agreement?: AgreementUpdateOneRequiredWithoutTrailsNestedInput
  }

  export type AgreementTrailUncheckedUpdateWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementTrailUncheckedUpdateManyWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    agreementId?: IntFieldUpdateOperationsInput | number
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpTokenUpdateWithoutUserInput = {
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
  }

  export type OtpTokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
  }

  export type OtpTokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    otpCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementTrailCreateManyAgreementInput = {
    id?: number
    actorId?: number | null
    actorRole: $Enums.ActorRole
    actorAction: $Enums.ActorAction
    createdAt?: Date | string
    ipAddress?: string | null
    previousLogHash?: string | null
    logHash?: string | null
  }

  export type AgreementSignerCreateManyAgreementInput = {
    id?: number
    signerEmail: string
    signerName?: string | null
    status: $Enums.SignerStatus
    signedAt?: Date | string | null
    signatureCoords?: string | null
  }

  export type SigningTokenCreateManyAgreementInput = {
    id?: number
    signerEmail: string
    token: string
    expiresAt?: Date | string | null
    usedAt?: Date | string | null
  }

  export type AgreementTrailUpdateWithoutAgreementInput = {
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
    actor?: UserUpdateOneWithoutTrailsNestedInput
  }

  export type AgreementTrailUncheckedUpdateWithoutAgreementInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: NullableIntFieldUpdateOperationsInput | number | null
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementTrailUncheckedUpdateManyWithoutAgreementInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: NullableIntFieldUpdateOperationsInput | number | null
    actorRole?: EnumActorRoleFieldUpdateOperationsInput | $Enums.ActorRole
    actorAction?: EnumActorActionFieldUpdateOperationsInput | $Enums.ActorAction
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    previousLogHash?: NullableStringFieldUpdateOperationsInput | string | null
    logHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementSignerUpdateWithoutAgreementInput = {
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementSignerUncheckedUpdateWithoutAgreementInput = {
    id?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgreementSignerUncheckedUpdateManyWithoutAgreementInput = {
    id?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    signerName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSignerStatusFieldUpdateOperationsInput | $Enums.SignerStatus
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signatureCoords?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SigningTokenUpdateWithoutAgreementInput = {
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SigningTokenUncheckedUpdateWithoutAgreementInput = {
    id?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SigningTokenUncheckedUpdateManyWithoutAgreementInput = {
    id?: IntFieldUpdateOperationsInput | number
    signerEmail?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}