
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  provider: 'provider',
  avatar: 'avatar',
  isVerified: 'isVerified'
};

exports.Prisma.AgreementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  creatorId: 'creatorId',
  fileUrl: 'fileUrl',
  receiverEmail: 'receiverEmail',
  status: 'status',
  signatureCoords: 'signatureCoords',
  createdAt: 'createdAt',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  originalFilename: 'originalFilename'
};

exports.Prisma.AgreementTrailScalarFieldEnum = {
  id: 'id',
  agreementId: 'agreementId',
  actorId: 'actorId',
  actorRole: 'actorRole',
  actorAction: 'actorAction',
  createdAt: 'createdAt',
  ipAddress: 'ipAddress',
  previousLogHash: 'previousLogHash',
  logHash: 'logHash'
};

exports.Prisma.AgreementSignerScalarFieldEnum = {
  id: 'id',
  agreementId: 'agreementId',
  signerEmail: 'signerEmail',
  signerName: 'signerName',
  status: 'status',
  signedAt: 'signedAt',
  signatureCoords: 'signatureCoords'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fileUrl: 'fileUrl',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  originalFilename: 'originalFilename'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  creatorId: 'creatorId',
  createdAt: 'createdAt'
};

exports.Prisma.SigningTokenScalarFieldEnum = {
  id: 'id',
  agreementId: 'agreementId',
  signerEmail: 'signerEmail',
  token: 'token',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt'
};

exports.Prisma.OtpTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  otpCode: 'otpCode',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  verifiedAt: 'verifiedAt',
  purpose: 'purpose'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AgreementStatus = exports.$Enums.AgreementStatus = {
  CREATED: 'CREATED',
  SENT: 'SENT',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.ActorRole = exports.$Enums.ActorRole = {
  CREATOR: 'CREATOR',
  SIGNER: 'SIGNER'
};

exports.ActorAction = exports.$Enums.ActorAction = {
  CREATED: 'CREATED',
  SENT: 'SENT',
  OPENED: 'OPENED',
  SIGNED: 'SIGNED',
  EXPIRED: 'EXPIRED',
  VIEWED: 'VIEWED'
};

exports.SignerStatus = exports.$Enums.SignerStatus = {
  PENDING: 'PENDING',
  SIGNED: 'SIGNED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Agreement: 'Agreement',
  AgreementTrail: 'AgreementTrail',
  AgreementSigner: 'AgreementSigner',
  Document: 'Document',
  Contact: 'Contact',
  SigningToken: 'SigningToken',
  OtpToken: 'OtpToken'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
