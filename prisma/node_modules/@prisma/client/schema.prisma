// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActorRole {
  CREATOR
  SIGNER
}

enum ActorAction {
  CREATED
  SENT
  OPENED
  SIGNED
  EXPIRED
  VIEWED
}

enum SignerStatus {
  PENDING
  SIGNED
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       String
  createdAt  DateTime @default(now())
  provider   String   @default("credentials")
  avatar     String?
  isVerified Boolean  @default(false)

  agreements Agreement[]
  documents  Document[]
  contacts   Contact[]
  trails     AgreementTrail[] @relation("TrailActor")
  otpTokens  OtpToken[]
}

model Agreement {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  creatorId        Int
  file             Bytes?
  receiverEmail    String
  status           String
  signatureCoords  String?
  createdAt        DateTime @default(now())
  mimeType         String?
  fileSize         Int?
  originalFilename String?

  creator       User              @relation(fields: [creatorId], references: [id])
  trails        AgreementTrail[]
  signers       AgreementSigner[]
  signingTokens SigningToken[]
}

model AgreementTrail {
  id          Int         @id @default(autoincrement())
  agreementId Int
  actorId     Int?
  actorRole   ActorRole
  actorAction ActorAction
  createdAt   DateTime    @default(now())
  ipAddress   String?

  agreement Agreement @relation(fields: [agreementId], references: [id])
  actor     User?     @relation("TrailActor", fields: [actorId], references: [id])
}

model AgreementSigner {
  id              Int          @id @default(autoincrement())
  agreementId     Int
  signerEmail     String
  signerName      String?
  status          SignerStatus
  signedAt        DateTime?
  signatureCoords String?

  agreement Agreement @relation(fields: [agreementId], references: [id])
}

model Document {
  id               Int      @id @default(autoincrement())
  name             String
  fileUrl          String? // URL from UploadThing
  creatorId        Int
  createdAt        DateTime @default(now())
  mimeType         String?
  fileSize         Int?
  originalFilename String?

  creator User @relation(fields: [creatorId], references: [id])
}

model Contact {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  creatorId Int
  createdAt DateTime @default(now())

  creator User @relation(fields: [creatorId], references: [id])
}

model SigningToken {
  id          Int       @id @default(autoincrement())
  agreementId Int
  signerEmail String
  token       String    @unique
  expiresAt   DateTime?
  usedAt      DateTime?

  agreement Agreement @relation(fields: [agreementId], references: [id])
}

model OtpToken {
  id         Int       @id @default(autoincrement())
  userId     Int
  otpCode    String
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  verifiedAt DateTime?
  purpose    String // e.g., "LOGIN", "SIGNUP", "FORGOT_PASSWORD"

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, purpose]) // <-- This is the compound unique constraint
}
